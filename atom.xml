<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞奔的弹幕君</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-20T17:13:09.019Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>David</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://yoursite.com/2018/04/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/20/python学习笔记/</id>
    <published>2018-04-20T12:49:59.065Z</published>
    <updated>2018-04-20T17:13:09.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-python里-args和-kwargs的用法"><a href="#1-python里-args和-kwargs的用法" class="headerlink" title="1. python里*args和**kwargs的用法"></a>1. python里*args和**kwargs的用法</h3><p><code>引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple</code><br><code>**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'args = '</span>, args</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'kwargs = '</span>, kwargs</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'---------------------------------------'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)                             <span class="comment">#参数只传到*args中</span></span><br><span class="line">    foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)                         <span class="comment">#参数只传到**kwargs中</span></span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)                <span class="comment">#参数可以传到*args和**kwargs中</span></span><br><span class="line">    foo(<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>, a=<span class="number">1</span>, b=<span class="string">'2'</span>, c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs =  &#123;&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  ()</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  (<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>)</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="string">'2'</span>&#125;</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><h3 id="2-python对txt文件的操作"><a href="#2-python对txt文件的操作" class="headerlink" title="2.python对txt文件的操作"></a>2.python对txt文件的操作</h3><p>2.1 使用<strong>open()</strong> 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError<br><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=T)</code><br>参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。</p><p>‘r’表示打开文件只读，不能写。</p><p>‘w’表示打开文件只写，并且清空文件。</p><p>‘x’表示独占打开文件，如果文件已经存打开就会失败。</p><p>‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。</p><p>‘b’表示二进制的模式打开文件。</p><p>‘t’表示文本模式，默认情况下就是这种模式。</p><p>‘+’打开文件更新（读取或写入）。</p><p>缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空<br>打开文件的操作常使用异常捕捉来</p><p>str.strip(rm)方法,去除字符串开头和结尾的rm字符，<code>readline()</code>获取的是一行文本的字符串形式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""打开一个文件，存储到列表中，并返回该列表"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_open:    <span class="comment">#打开文件，因为只有一行，所以不用使用循环</span></span><br><span class="line">            data = file_open.readline()</span><br><span class="line">        <span class="comment"># [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用</span></span><br><span class="line">        file_data = data.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="string">"""split方法返回字符串列表，如果只是一个标识符接受，则不会报错</span></span><br><span class="line"><span class="string">        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的</span></span><br><span class="line"><span class="string">        字符串列表的个数不一致而导致ValueError"""</span></span><br><span class="line">        <span class="keyword">return</span> file_data</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> ioerr:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'IOError:'</span> + str(ioerr)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> valerr:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ValueError:'</span> + str(valerr)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p> <code>(role, line_spoken) = each_line.split(&#39; ,&#39;)</code>，多重赋值(),[]均可以接受数据-字符串列表，<strong>each_line本身不会被分割，保持不变</strong><br><code>[role, line_spoken] = each_line.split(&#39;, &#39;,1)</code><br><code>[string1, string2, string3] = each_line.split(&#39;, &#39;, 2)</code>如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分</p><p>2.2 使用<strong>open()</strong> 函数和<strong>file_object.write()</strong> 方法写入文本<br><strong>方法一、增加额外的逻辑来处理异常</strong>,使用finally来关闭文件对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:   <span class="comment">#文件写入过程</span></span><br><span class="line">    man_file = open(<span class="string">'man_data.txt'</span>, <span class="string">'w'</span>)         <span class="comment">#新建文件</span></span><br><span class="line">    other_file = open(<span class="string">'other_data.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    <span class="string">""" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class="line"><span class="string">    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里"""</span></span><br><span class="line">    <span class="comment"># print &gt;&gt; man_file, man                       #文件对象里传入数据</span></span><br><span class="line">    <span class="comment"># print &gt;&gt; other_file, other</span></span><br><span class="line">    man_file.write(str(man))</span><br><span class="line">    other_file.write(str(other))</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error.'</span></span><br><span class="line"><span class="keyword">finally</span>:  <span class="comment">#无论有无异常，此句都会执行，</span></span><br><span class="line">    man_file.close()</span><br><span class="line">    other_file.close()</span><br></pre></td></tr></table></figure></p><p><strong>方法二、with处理文件异常</strong>,不用考虑关闭文件对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:   <span class="comment">#文件写入过程</span></span><br><span class="line">    <span class="comment"># with open('man_data.txt', 'w') as man_file:         #新建文件</span></span><br><span class="line">    <span class="comment">#     # print &gt;&gt; man_file, man                        #文件对象里传入数据</span></span><br><span class="line">    <span class="comment">#     man_file.write(str(man))</span></span><br><span class="line">    <span class="comment"># with open('other_data.txt', 'w') as other_file:</span></span><br><span class="line">    <span class="comment">#     """ write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class="line">    <span class="comment">#          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里"""</span></span><br><span class="line">    <span class="comment">#     # print &gt;&gt; other_file, other</span></span><br><span class="line">    <span class="comment">#     other_file.write(str(other))</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'man_data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> man_file, open(<span class="string">'other_data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> other_file:</span><br><span class="line">        <span class="comment">#两个语句合并为一个with语句</span></span><br><span class="line">        man_file.write(str(man))</span><br><span class="line">        other_file.write(str(other))</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error:'</span> + str(err)</span><br></pre></td></tr></table></figure></p><p>2.3实例<br>打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="comment"># file.readlines()读取数据的行数，'行数据\n' 是该方法输出列表的每行数据的元素</span></span><br><span class="line">attribute_data = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./train_data.txt'</span>) <span class="keyword">as</span> file,  open(<span class="string">'./train_data2.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">raw_number = len(file.readlines())      <span class="comment"># 计算文件的总行数</span></span><br><span class="line">file.seek(<span class="number">0</span>)                            <span class="comment"># 回到第一行，因为每次使用readline，文本都会后退一行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(raw_number):        <span class="comment"># 计算文件的总行数，设计循环逐行读入数据</span></span><br><span class="line">text_line = file.readline()     <span class="comment"># 每次调用该函数使文件下移一行</span></span><br><span class="line"><span class="comment"># temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表</span></span><br><span class="line"><span class="comment"># attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列</span></span><br><span class="line">temp_file = text_line.strip().split(<span class="string">' '</span>, <span class="number">4</span>)             <span class="comment"># temp_file存储分割后的数据列表</span></span><br><span class="line">attribute_data = temp_file[<span class="number">0</span>:<span class="number">4</span>]      <span class="comment"># 存储要使用的数据列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> attribute_data:          <span class="comment"># 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格</span></span><br><span class="line">file2.writelines(data)</span><br><span class="line">file2.writelines(<span class="string">' '</span>)            <span class="comment"># 数据间加入空格</span></span><br><span class="line">file2.writelines(<span class="string">'\n'</span>)               <span class="comment"># 数据换行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error:'</span> + str(err)</span><br><span class="line"><span class="keyword">print</span> attribute_data </span><br><span class="line">`</span><br></pre></td></tr></table></figure><h3 id="3-python函数shutil，实现文件的复制"><a href="#3-python函数shutil，实现文件的复制" class="headerlink" title="3.python函数shutil，实现文件的复制"></a>3.python函数shutil，实现文件的复制</h3><p>使用<code>shutil.copy(str_file1,str_file2)</code>将文件str_file1，复制到文件str_file2的位置</p><h3 id="4-python实现读取文件夹里文件名功能"><a href="#4-python实现读取文件夹里文件名功能" class="headerlink" title="4.python实现读取文件夹里文件名功能"></a>4.python实现读取文件夹里文件名功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">path = <span class="string">'the path of the directory'</span>    <span class="comment"># 读取文件路径</span></span><br><span class="line">list_name = os.listdir(path)            <span class="comment"># 读取路径下文件和文件夹的名</span></span><br></pre></td></tr></table></figure><p>则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-python里-args和-kwargs的用法&quot;&gt;&lt;a href=&quot;#1-python里-args和-kwargs的用法&quot; class=&quot;headerlink&quot; title=&quot;1. python里*args和**kwargs的用法&quot;&gt;&lt;/a&gt;1. python
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>

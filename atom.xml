<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞奔的弹幕君</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-21T10:10:53.801Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>David</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++学习笔记</title>
    <link href="http://yoursite.com/2018/04/21/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/21/C++学习笔记/</id>
    <published>2018-04-21T06:33:57.761Z</published>
    <updated>2018-04-21T10:10:53.801Z</updated>
    
    <content type="html"><![CDATA[<p>2018-2-3</p><h3 id="1-C-的头文件和源文件"><a href="#1-C-的头文件和源文件" class="headerlink" title="1. C++的头文件和源文件"></a><strong>1. C++的头文件和源文件</strong></h3><p><code>.h</code>头文件只需预处理，<code>.cpp</code>才需要编译，一般在头文件里声明一个类及类的的方法，在源文件里实现函数的<strong>定义</strong>与<strong>实现</strong>，这样可以将声明和定义分开，利于构建大规模的程序。<br><code>hello.h</code>文件如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once       <span class="comment">//预编译一次，防止出现重复包含头文件的情况</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:                   <span class="comment">//共有函数及成员定义的关键词</span></span><br><span class="line">Hello();             <span class="comment">//声明构造函数，构造函数最好不要有默认参数</span></span><br><span class="line">~Hello();            <span class="comment">//声明析构函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">talk</span><span class="params">(<span class="keyword">int</span> number=<span class="number">0</span>)</span></span>;    <span class="comment">//声明共有成员函数,参数给出默认值  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:            <span class="comment">//私有函数及成员定义的关键词</span></span><br><span class="line"><span class="built_in">string</span> content; <span class="comment">//声明一个字符串变量</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>hello.cpp</code>文件如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类的定义与实现</span></span><br><span class="line">Hello::Hello()      <span class="comment">//构造函数定义</span></span><br><span class="line">&#123;</span><br><span class="line">content = <span class="string">"这是私有成员变量"</span>;      <span class="comment">//在构造函数中为成员变量赋值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这是构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Hello::~Hello()       <span class="comment">//析构函数定义</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"这是析构函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Hello::talk(<span class="keyword">int</span> number)    <span class="comment">//成员函数定义</span></span><br><span class="line">&#123;</span><br><span class="line">num = number;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"content:"</span>&lt;&lt; content &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//头文件中包含了string才能使用该句</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num:"</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主函数main.cpp如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Hello robot;      <span class="comment">//实例化一个对象</span></span><br><span class="line">robot.talk(<span class="number">233</span>);  <span class="comment">//调用成员函数，默认参数为0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：</p><p><img src="https://www.github.com/2033329616/image_hosting/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/result.jpg" alt="运行结果" title="result"></p><h3 id="2-C-中的L和-T的作用"><a href="#2-C-中的L和-T的作用" class="headerlink" title="2. C++中的L和_T的作用"></a><strong>2. C++中的L和_T的作用</strong></h3><p>在一个字符串前加 <code>L</code>表示将ANSI字符串转换为unicode的字符串，每个字符占两个字节<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strlen</span>(<span class="string">"abc"</span>) = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">strlen</span>(<span class="string">L"asd"</span>) = <span class="number">6</span>;</span><br></pre></td></tr></table></figure></p><p> _T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式，如果你定义了UNICODE，那么_T宏会把字符串前面加一个L。这时 _T(“ABCD”) 相当于 L”ABCD” ，这是宽字符串。如果没有定义，那么_T宏不会在字符串前面加那个L，_T(“ABCD”) 就等价于 “ABCD”  </p><h3 id="3-C-调用Python函数的方法"><a href="#3-C-调用Python函数的方法" class="headerlink" title="3. C++调用Python函数的方法"></a><strong>3. C++调用Python函数的方法</strong></h3><p> 这里使用vs2015编译程序，首先要设置项目的属性，把python的include目录和libs目录包含到项目中，设置如下：</p><p> <img src="https://www.github.com/2033329616/image_hosting/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/c++%E8%B0%83%E7%94%A8python_3.jpg" alt="项目的属性设置" title="c++调用python_3"></p><p> python程序如下：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertStrToNum</span><span class="params">(string)</span>:</span></span><br><span class="line">result = eval(string)</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p><p> 这里的python程序当做模块来对待，文件夹名称为strToNum，文件名strToNum.py，在同一个文件夹下有<strong>init</strong>.py文件(内容可为空)来表示模块。</p><p> 在<code>C++</code>程序中调用python函数时注意：python语句写成模块的形式；将python模块的路径添加到系统中，否则c++程序无法找到python模块，最好使用相对路径；</p><p> 步骤：<br> 1.<code>Py_Initialize()</code>初始化python;<br> 2.定义PyObject相关指针，</p><ul><li>载入python模块</li><li>加载模块函数</li><li>添加参数列表</li><li>调用python函数</li><li>定义C++数据变量，转换python返回的参数为<code>C++</code>的数据类型，并用该变量接收</li></ul><p>3.<code>Py_Finalize()</code>释放资源</p><p> c++程序如下<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"iostream"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Python.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cstring"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Py_Initialize();</span><br><span class="line"><span class="comment">//PyRun_SimpleString("x=eval('2 + 3*2')");    //运行单个python语句</span></span><br><span class="line"><span class="comment">//PyRun_SimpleString("print(x)");</span></span><br><span class="line"><span class="comment">//PyArg_Parse(x, "i");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Python工作路径切换到待调用模块所在目录，一定要保证路径名的正确性</span></span><br><span class="line"><span class="built_in">string</span> path = <span class="string">".\\strToNum"</span>;                  <span class="comment">//相对路径，windows下</span></span><br><span class="line"><span class="built_in">string</span> chdir_cmd = <span class="built_in">string</span>(<span class="string">"sys.path.append(\""</span>) + path + <span class="string">"\")"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cstr_cmd = chdir_cmd.c_str();</span><br><span class="line">PyRun_SimpleString(<span class="string">"import sys"</span>);</span><br><span class="line">PyRun_SimpleString(cstr_cmd);</span><br><span class="line">PyRun_SimpleString(<span class="string">"import os"</span>);</span><br><span class="line">PyRun_SimpleString(<span class="string">"print(os.getcwd())"</span>);    <span class="comment">//获取当前路径</span></span><br><span class="line">PyRun_SimpleString(<span class="string">"print(sys.path)"</span>);</span><br><span class="line"></span><br><span class="line">PyObject *pModule = <span class="literal">NULL</span>;       <span class="comment">//接收python模块</span></span><br><span class="line">PyObject *pFunc = <span class="literal">NULL</span>;         <span class="comment">//接收pyhton函数</span></span><br><span class="line">PyObject *pResult = <span class="literal">NULL</span>;       <span class="comment">//接收python函数的返回结果</span></span><br><span class="line"><span class="keyword">double</span> result = <span class="number">0</span>;              <span class="comment">//C++中接收最终计算结果的变量</span></span><br><span class="line"></span><br><span class="line">pModule = PyImport_ImportModule(<span class="string">"strToNum"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pModule) <span class="comment">// 加载模块失败</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"[ERROR] Python get module failed."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"[INFO] Python get module succeed."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pFunc = PyObject_GetAttrString(pModule, <span class="string">"convertStrToNum"</span>);</span><br><span class="line"><span class="keyword">if</span> (!pFunc || !PyCallable_Check(pFunc))  <span class="comment">// 验证是否加载成功</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"[ERROR] Can't find funftion (convertStrToNum)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"[INFO] Get function (convertStrToNum) succeed."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">PyObject *pArgs = PyTuple_New(<span class="number">1</span>);         <span class="comment">//新建数组保存传入python函数的参数</span></span><br><span class="line">PyTuple_SetItem(pArgs, <span class="number">0</span>, Py_BuildValue(<span class="string">"s"</span>, <span class="string">"1 + 2*4.3 -1"</span>));</span><br><span class="line"><span class="comment">//PyObject *pArgs = Py_BuildValue("23");</span></span><br><span class="line">pResult = PyEval_CallObject(pFunc, pArgs);  <span class="comment">//调用python函数</span></span><br><span class="line">PyArg_Parse(pResult, <span class="string">"d"</span>, &amp;result);         <span class="comment">//python函数的返回结果转换为double</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"result:"</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Py_Finalize();      <span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 参考的文章：<br> <a href="http://blog.csdn.net/itbuluoge/article/details/13005369" target="_blank" rel="noopener"><code>C++</code>调用python返回值</a><br> <a href="http://blog.csdn.net/nynyvkhhiiii/article/details/17525865" target="_blank" rel="noopener">调用python的类函数</a><br> <a href="https://docs.microsoft.com/zh-cn/visualstudio/python/working-with-c-cpp-python-in-visual-studio" target="_blank" rel="noopener">使用与pyhton的<code>C++</code>扩展</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018-2-3&lt;/p&gt;
&lt;h3 id=&quot;1-C-的头文件和源文件&quot;&gt;&lt;a href=&quot;#1-C-的头文件和源文件&quot; class=&quot;headerlink&quot; title=&quot;1. C++的头文件和源文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. C++的头文件和源文件&lt;/strong&gt;&lt;
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="C++调用Python" scheme="http://yoursite.com/tags/C-%E8%B0%83%E7%94%A8Python/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记</title>
    <link href="http://yoursite.com/2018/04/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/04/20/python学习笔记/</id>
    <published>2018-04-20T12:49:59.065Z</published>
    <updated>2018-04-21T09:21:14.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-python里-args和-kwargs的用法"><a href="#1-python里-args和-kwargs的用法" class="headerlink" title="1. python里*args和**kwargs的用法"></a>1. python里*args和**kwargs的用法</h3><p><code>引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple</code><br><code>**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'args = '</span>, args</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'kwargs = '</span>, kwargs</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'---------------------------------------'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)                             <span class="comment">#参数只传到*args中</span></span><br><span class="line">    foo(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)                         <span class="comment">#参数只传到**kwargs中</span></span><br><span class="line">    foo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)                <span class="comment">#参数可以传到*args和**kwargs中</span></span><br><span class="line">    foo(<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>, a=<span class="number">1</span>, b=<span class="string">'2'</span>, c=<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs =  &#123;&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  ()</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">---------------------------------------</span><br><span class="line">args =  (<span class="string">'a'</span>, <span class="number">1</span>, <span class="keyword">None</span>)</span><br><span class="line">kwargs =  &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="string">'2'</span>&#125;</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure></p><h3 id="2-python对txt文件的操作"><a href="#2-python对txt文件的操作" class="headerlink" title="2.python对txt文件的操作"></a>2.python对txt文件的操作</h3><p>2.1 使用<strong>open()</strong> 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError<br><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=T)</code><br>参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。</p><p>‘r’表示打开文件只读，不能写。</p><p>‘w’表示打开文件只写，并且清空文件。</p><p>‘x’表示独占打开文件，如果文件已经存打开就会失败。</p><p>‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。</p><p>‘b’表示二进制的模式打开文件。</p><p>‘t’表示文本模式，默认情况下就是这种模式。</p><p>‘+’打开文件更新（读取或写入）。</p><p>缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空<br>打开文件的操作常使用异常捕捉来</p><p>str.strip(rm)方法,去除字符串开头和结尾的rm字符，<code>readline()</code>获取的是一行文本的字符串形式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="string">"""打开一个文件，存储到列表中，并返回该列表"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_open:    <span class="comment">#打开文件，因为只有一行，所以不用使用循环</span></span><br><span class="line">            data = file_open.readline()</span><br><span class="line">        <span class="comment"># [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用</span></span><br><span class="line">        file_data = data.strip().split(<span class="string">','</span>)</span><br><span class="line">        <span class="string">"""split方法返回字符串列表，如果只是一个标识符接受，则不会报错</span></span><br><span class="line"><span class="string">        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的</span></span><br><span class="line"><span class="string">        字符串列表的个数不一致而导致ValueError"""</span></span><br><span class="line">        <span class="keyword">return</span> file_data</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> ioerr:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'IOError:'</span> + str(ioerr)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> valerr:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'ValueError:'</span> + str(valerr)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p> <code>(role, line_spoken) = each_line.split(&#39; ,&#39;)</code>，多重赋值(),[]均可以接受数据-字符串列表，<strong>each_line本身不会被分割，保持不变</strong><br><code>[role, line_spoken] = each_line.split(&#39;, &#39;,1)</code><br><code>[string1, string2, string3] = each_line.split(&#39;, &#39;, 2)</code>如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分</p><p>2.2 使用<strong>open()</strong> 函数和<strong>file_object.write()</strong> 方法写入文本<br><strong>方法一、增加额外的逻辑来处理异常</strong>,使用finally来关闭文件对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:   <span class="comment">#文件写入过程</span></span><br><span class="line">    man_file = open(<span class="string">'man_data.txt'</span>, <span class="string">'w'</span>)         <span class="comment">#新建文件</span></span><br><span class="line">    other_file = open(<span class="string">'other_data.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">    <span class="string">""" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class="line"><span class="string">    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里"""</span></span><br><span class="line">    <span class="comment"># print &gt;&gt; man_file, man                       #文件对象里传入数据</span></span><br><span class="line">    <span class="comment"># print &gt;&gt; other_file, other</span></span><br><span class="line">    man_file.write(str(man))</span><br><span class="line">    other_file.write(str(other))</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error.'</span></span><br><span class="line"><span class="keyword">finally</span>:  <span class="comment">#无论有无异常，此句都会执行，</span></span><br><span class="line">    man_file.close()</span><br><span class="line">    other_file.close()</span><br></pre></td></tr></table></figure></p><p><strong>方法二、with处理文件异常</strong>,不用考虑关闭文件对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:   <span class="comment">#文件写入过程</span></span><br><span class="line">    <span class="comment"># with open('man_data.txt', 'w') as man_file:         #新建文件</span></span><br><span class="line">    <span class="comment">#     # print &gt;&gt; man_file, man                        #文件对象里传入数据</span></span><br><span class="line">    <span class="comment">#     man_file.write(str(man))</span></span><br><span class="line">    <span class="comment"># with open('other_data.txt', 'w') as other_file:</span></span><br><span class="line">    <span class="comment">#     """ write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class="line">    <span class="comment">#          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里"""</span></span><br><span class="line">    <span class="comment">#     # print &gt;&gt; other_file, other</span></span><br><span class="line">    <span class="comment">#     other_file.write(str(other))</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'man_data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> man_file, open(<span class="string">'other_data.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> other_file:</span><br><span class="line">        <span class="comment">#两个语句合并为一个with语句</span></span><br><span class="line">        man_file.write(str(man))</span><br><span class="line">        other_file.write(str(other))</span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error:'</span> + str(err)</span><br></pre></td></tr></table></figure></p><p>2.3实例<br>打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="comment"># file.readlines()读取数据的行数，'行数据\n' 是该方法输出列表的每行数据的元素</span></span><br><span class="line">attribute_data = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./train_data.txt'</span>) <span class="keyword">as</span> file,  open(<span class="string">'./train_data2.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> file2:</span><br><span class="line">raw_number = len(file.readlines())      <span class="comment"># 计算文件的总行数</span></span><br><span class="line">file.seek(<span class="number">0</span>)                            <span class="comment"># 回到第一行，因为每次使用readline，文本都会后退一行</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(raw_number):        <span class="comment"># 计算文件的总行数，设计循环逐行读入数据</span></span><br><span class="line">text_line = file.readline()     <span class="comment"># 每次调用该函数使文件下移一行</span></span><br><span class="line"><span class="comment"># temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表</span></span><br><span class="line"><span class="comment"># attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列</span></span><br><span class="line">temp_file = text_line.strip().split(<span class="string">' '</span>, <span class="number">4</span>)             <span class="comment"># temp_file存储分割后的数据列表</span></span><br><span class="line">attribute_data = temp_file[<span class="number">0</span>:<span class="number">4</span>]      <span class="comment"># 存储要使用的数据列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> attribute_data:          <span class="comment"># 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格</span></span><br><span class="line">file2.writelines(data)</span><br><span class="line">file2.writelines(<span class="string">' '</span>)            <span class="comment"># 数据间加入空格</span></span><br><span class="line">file2.writelines(<span class="string">'\n'</span>)               <span class="comment"># 数据换行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> err:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'File error:'</span> + str(err)</span><br><span class="line"><span class="keyword">print</span> attribute_data </span><br><span class="line">`</span><br></pre></td></tr></table></figure><h3 id="3-python函数shutil，实现文件的复制"><a href="#3-python函数shutil，实现文件的复制" class="headerlink" title="3.python函数shutil，实现文件的复制"></a>3.python函数shutil，实现文件的复制</h3><p>使用<code>shutil.copy(str_file1,str_file2)</code>将文件str_file1，复制到文件str_file2的位置</p><h3 id="4-python实现读取文件夹里文件名功能"><a href="#4-python实现读取文件夹里文件名功能" class="headerlink" title="4.python实现读取文件夹里文件名功能"></a>4.python实现读取文件夹里文件名功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">path = <span class="string">'the path of the directory'</span>    <span class="comment"># 读取文件路径</span></span><br><span class="line">list_name = os.listdir(path)            <span class="comment"># 读取路径下文件和文件夹的名</span></span><br></pre></td></tr></table></figure><p>则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-python里-args和-kwargs的用法&quot;&gt;&lt;a href=&quot;#1-python里-args和-kwargs的用法&quot; class=&quot;headerlink&quot; title=&quot;1. python里*args和**kwargs的用法&quot;&gt;&lt;/a&gt;1. python
      
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>

{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/baidu_verify_nzjMJ82gi0.html","path":"baidu_verify_nzjMJ82gi0.html","modified":0,"renderable":1},{"_id":"themes/next/source/google62ee9bab28fe79d0.html","path":"google62ee9bab28fe79d0.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514806389000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514806389000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1514806389000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1514806389000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514806389000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1514806389000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514806389000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1514806389000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514806389000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514806389000},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1514806389000},{"_id":"themes/next/_config.yml","hash":"6dee4bfbbca1d129cbdb092580c88e3cfd8e58f0","modified":1525096109884},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1514806389000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514806389000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1514806389000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1514806389000},{"_id":"source/_posts/dlib安装总结.md","hash":"25281925af41322a4504bd4904cea64d95c2ab09","modified":1524326468460},{"_id":"source/_posts/C++学习笔记.md","hash":"e094430fc7c17b7f8ce8b44c0973c371d49b49d6","modified":1524324918626},{"_id":"source/_posts/docker在ubuntu上的安装及使用.md","hash":"196d9054510c4a5aaeacf2e9b5c49df67d0a7bbc","modified":1525096081150},{"_id":"source/_posts/linux系统安装及软件配置.md","hash":"e97f6ade1ff636694c80f2b38f50af2d7c3b9326","modified":1525095290039},{"_id":"source/_posts/python学习笔记.md","hash":"7dea2c3d24f36fa462c51e467dcc27da7968398d","modified":1524302474406},{"_id":"source/categories/index.md","hash":"af47d61e0283b9490bc5c1af6de3ab9b403ca741","modified":1524244925500},{"_id":"source/search/index.md","hash":"d998429a452efc6ca8eb16aed00349ad2b450c36","modified":1524283225791},{"_id":"source/tags/index.md","hash":"9da13b77bf850d4fbce5b8a31250592d5d4ba038","modified":1524303279888},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1514806389000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1514806389000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1514806389000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1514806389000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1514806389000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1514806389000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1514806389000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1514806389000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1514806389000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1514806389000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1514806389000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1514806389000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1514806389000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1514806389000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1514806389000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1514806389000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1514806389000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1514806389000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1514806389000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1514806389000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1514806389000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1514806389000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1514806389000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1514806389000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1514806389000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1514806389000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1514806389000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1514806389000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1514806389000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514806389000},{"_id":"themes/next/source/baidu_verify_nzjMJ82gi0.html","hash":"b41f16441ed7a04c871504be069679ea915ce50b","modified":1524313261785},{"_id":"themes/next/source/google62ee9bab28fe79d0.html","hash":"da2291227ab01c016b2e76da6656a97813fb6b41","modified":1524313900262},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514806389000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514806389000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514806389000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"source/_posts/images/Screenshot from 2018-03-30 21-30-43.png","hash":"3788877276bc0a844457f4b89aeea91e0e58a35c","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-30 21-31-44.png","hash":"ba6d955cdfd05870f5c6652343f2f0adc6ab3555","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-30 21-34-55.png","hash":"58355f1ad6a7ae23fde81d7c96389a1b3cf05c06","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-31 15-02-54.png","hash":"f9c7fa6e6c0f3c3c077b83a0ef108b8d46844739","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-31 23-04-59.png","hash":"7ab5141c2ddf909d5125f35e9d47cc0ae91ea4f4","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-04-01 00-03-24.png","hash":"110e500d54ceff28a1a01526e33d184529675220","modified":1524326870000},{"_id":"source/_posts/images/error1.jpg","hash":"7869fd91c7a580eff58a4533a28ac4ca7f9d015c","modified":1524319244125},{"_id":"source/_posts/images/result.jpg","hash":"5cd53744e94987980ed61bc05e08b0530b418e38","modified":1524292438173},{"_id":"source/_posts/images/screen2添加控件变量3.jpg","hash":"76343deecd9ff71aff1a45313d325f340a678c24","modified":1524326870000},{"_id":"source/_posts/images/virtualbox.jpg","hash":"db7e48d1bd2ac2616b381f6761581895f04716eb","modified":1524319244349},{"_id":"source/_posts/images/virtualbox0.jpg","hash":"8f2b421555c8c6ade8c4ef0c431dcdc989053e7b","modified":1524319244246},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514806389000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514806389000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514806389000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1514806389000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1514806389000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1514806389000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1514806389000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1514806389000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514806389000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514806389000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514806389000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1514806389000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1514806389000},{"_id":"themes/next/layout/_macro/post.swig","hash":"00ca04166bf1d867c0df9e87f47a29faf916eac8","modified":1524244032374},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e092cff3bc4409724dbc6eb8e42dc16026fb5d91","modified":1524301926092},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514806389000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1514806389000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514806389000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514806389000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514806389000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514806389000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514806389000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1514806389000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514806389000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514806389000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514806389000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514806389000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1514806389000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514806389000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1514806389000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1514806389000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1514806389000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514806389000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1514806389000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514806389000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514806389000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514806389000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1514806389000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514806389000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1514806389000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514806389000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514806389000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514806389000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1514806389000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514806389000},{"_id":"source/_posts/images/123.jpg","hash":"2902455e443bc87f0ee66183e6ef8502da18eaa5","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-30 20-57-04.png","hash":"e6add8b658dcf45bc6dccb511a7046ace23d6b39","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-30 20-41-23.png","hash":"75e3b9f0a8fa532b58eac665304cc0543b30201b","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-31 23-16-41.png","hash":"ad25ffb4a57a782aa6abb7bd66b4c46f0ce2b281","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-04-01 00-02-17.png","hash":"3247d2809b736dbdfd36c4275aee84a881f3fc72","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-04-01 00-04-35.png","hash":"c85c12daddacea434140cacfb2df3aae0bdf4c50","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-04-01 00-16-54.png","hash":"5a0a0ce46c1201943f46e79f3987e0f5d55c6e61","modified":1524326870000},{"_id":"source/_posts/images/c++调用python.jpg","hash":"2902455e443bc87f0ee66183e6ef8502da18eaa5","modified":1524326870000},{"_id":"source/_posts/images/c++调用python_1.jpg","hash":"2902455e443bc87f0ee66183e6ef8502da18eaa5","modified":1524326870000},{"_id":"source/_posts/images/c++调用python_2.jpg","hash":"2902455e443bc87f0ee66183e6ef8502da18eaa5","modified":1524326870000},{"_id":"source/_posts/images/c++调用python_3.jpg","hash":"2902455e443bc87f0ee66183e6ef8502da18eaa5","modified":1524292438288},{"_id":"source/_posts/images/virtualbox2_1.jpg","hash":"50c5c0d07b1ea82eac6241650073ebe7b5c81b12","modified":1524319244443},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514806389000},{"_id":"themes/next/source/images/avatar.png","hash":"23da95f330ef195c60d98762ce6f8045dd30ce1e","modified":1524294002060},{"_id":"source/_posts/images/Screenshot from 2018-03-31 14-53-50.png","hash":"907ef2ace5ced9502fcab899c9577f208f183f55","modified":1524326870000},{"_id":"source/_posts/images/Screenshot from 2018-03-31 14-44-02.png","hash":"5ad5c9451705284156f7e4d89e3de16fda1a0ca2","modified":1524326870000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514806389000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514806389000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514806389000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514806389000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1514806389000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1514806389000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514806389000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1514806389000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1514806389000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1514806389000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1514806389000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514806389000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1514806389000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514806389000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514806389000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514806389000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514806389000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1514806389000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1514806389000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514806389000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514806389000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514806389000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1514806389000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1514806389000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514806389000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514806389000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514806389000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514806389000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514806389000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1514806389000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514806389000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514806389000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514806389000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514806389000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514806389000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1514806389000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514806389000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514806389000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514806389000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514806389000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514806389000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514806389000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514806389000},{"_id":"public/atom.xml","hash":"a786728fdbd66adf328b59d2e4612e5a37435b05","modified":1525096398409},{"_id":"public/baidusitemap.xml","hash":"9f983ffa3ffaf725d5c4c37b7cfb3b38980b254d","modified":1525096398411},{"_id":"public/search.xml","hash":"9a7b862ed7efee16b187f794051ba6540771e6ac","modified":1525096398411},{"_id":"public/sitemap.xml","hash":"34fc7b9211e9eb00cd7bd2b24bd10dd2e360ee22","modified":1525096398411},{"_id":"public/search/index.html","hash":"3cfb9b44fbc2c1c03bdc8ff83bb4287e02b08217","modified":1525096399907},{"_id":"public/categories/index.html","hash":"7135c502a18dcf84a326689c938c75dc74912162","modified":1525096399915},{"_id":"public/tags/index.html","hash":"067094cde54058923f8415e92845aa1084b7be9a","modified":1525096399915},{"_id":"public/linux系统安装及软件配置.html","hash":"bf40dafd2dc7b467d8ca8ffee13cd7b8e05a37be","modified":1525096399921},{"_id":"public/docker在ubuntu上的安装及使用.html","hash":"ec714f6d225abc54560baa11da1954d48485673a","modified":1525096399921},{"_id":"public/dlib安装总结.html","hash":"ff54dbbb60f2f91602ec6b35f7839e3ca9747728","modified":1525096399921},{"_id":"public/C++学习笔记.html","hash":"b7dbfc66816fcd4928f86696788be4cde81e4eba","modified":1525096399921},{"_id":"public/archives/index.html","hash":"dd5b57b5104d19831a15b2154cb003fd3eb1539c","modified":1525096399921},{"_id":"public/archives/2018/04/index.html","hash":"5ead78ba55d093c420736dc4c578afc804fb8662","modified":1525096399921},{"_id":"public/archives/2018/index.html","hash":"85cb0844e6d62e72c79e75519c48f4637f3ad55a","modified":1525096399922},{"_id":"public/python学习笔记.html","hash":"34ae7c61647919397e395accd2f3e32595e3f452","modified":1525096399922},{"_id":"public/categories/Python/index.html","hash":"f9288d081ccdd1a090b1b1c8d610a0d4b383be40","modified":1525096399922},{"_id":"public/categories/docker/index.html","hash":"afb42923210f3457867e68861f2aaf9433408c48","modified":1525096399922},{"_id":"public/categories/C/index.html","hash":"ddffd729542cde3ba3b6addcc54532c5b04ab121","modified":1525096399922},{"_id":"public/categories/ubuntu系统/index.html","hash":"a8d78a8610a00c4be3e56708d39e17bc510d58c6","modified":1525096399922},{"_id":"public/categories/Python/Opencv/index.html","hash":"ba4d0a2cd299222fc411fcc5eb451f8d937d449f","modified":1525096399922},{"_id":"public/index.html","hash":"87d9adf6ad22c53eb9060c18c2694442c4f2bdef","modified":1525096399922},{"_id":"public/tags/Python/index.html","hash":"67b574598633f67300ccb286d8b075daa18686fa","modified":1525096399922},{"_id":"public/tags/dlib/index.html","hash":"bdf4c0cfb2b5d59f6fe44849f6e97a75b90ee5a5","modified":1525096399922},{"_id":"public/tags/opencv/index.html","hash":"9f42cd59e60be4ed0b22b55243e85c68d434f4d4","modified":1525096399922},{"_id":"public/tags/docker/index.html","hash":"2e5be0a21a06306f6147dc76328a243d56e38cda","modified":1525096399922},{"_id":"public/tags/C/index.html","hash":"9d6a8638fa8a598c81b65c85659b12f42b8a46e6","modified":1525096399922},{"_id":"public/tags/C-调用Python/index.html","hash":"ac7cd187cf4fd23c421ca4ffa7deff9f0fd0a41f","modified":1525096399922},{"_id":"public/tags/ubuntu系统/index.html","hash":"5a3da51930cb6e16f55df490b2c6561c981828c9","modified":1525096399923},{"_id":"public/tags/sublime配置/index.html","hash":"6a28c9e9536fbd3da51c4f5f984d421adb7a45ac","modified":1525096399923},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1525096399923},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1525096399923},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1525096399923},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525096399923},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1525096399923},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1525096399923},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1525096399923},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1525096399923},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1525096399923},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1525096399923},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1525096399923},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1525096399923},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525096399923},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1525096399923},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525096399924},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1525096399924},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525096399924},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1525096399924},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1525096399924},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1525096399924},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1525096399924},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1525096399924},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1525096399924},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1525096399924},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1525096399924},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1525096399924},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1525096399924},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1525096399924},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1525096399924},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1525096399924},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1525096399924},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1525096399925},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1525096399925},{"_id":"public/images/avatar.png","hash":"23da95f330ef195c60d98762ce6f8045dd30ce1e","modified":1525096400520},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525096400523},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525096400532},{"_id":"public/baidu_verify_nzjMJ82gi0.html","hash":"b41f16441ed7a04c871504be069679ea915ce50b","modified":1525096400540},{"_id":"public/google62ee9bab28fe79d0.html","hash":"da2291227ab01c016b2e76da6656a97813fb6b41","modified":1525096400540},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525096400540},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525096400540},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525096400540},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1525096400540},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1525096400540},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525096400540},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525096400541},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1525096400541},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1525096400541},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1525096400541},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1525096400541},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525096400541},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1525096400541},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1525096400541},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1525096400541},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1525096400541},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1525096400541},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1525096400541},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1525096400541},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1525096400541},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1525096400541},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1525096400541},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1525096400541},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1525096400542},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1525096400542},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1525096400543},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1525096400543},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1525096400543},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1525096400543},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525096400543},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1525096400543},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1525096400543},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1525096400543},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525096400543},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525096400543},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1525096400543},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1525096400544},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1525096400544},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1525096400544},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1525096400544},{"_id":"public/css/main.css","hash":"f5d35b80d12971e8efb7e38dba92104ff4d3854d","modified":1525096400544},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1525096400544},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1525096400544},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1525096400544},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1525096400544},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1525096400544},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525096400544},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525096400545},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525096400545},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1525096400545},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1525096400545},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1525096400545},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1525096400545},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1525096400546},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1525096400546},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525096400546},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1525096400546},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525096400546},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525096400546},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1525096400546},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1525096400546},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1525096400547},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525096400547},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1525096400547},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1525096400575}],"Category":[{"name":"Python","_id":"cjgmb0njr0004qcve8m1gio3a"},{"name":"docker","_id":"cjgmb0njy000aqcve2mz8q5mu"},{"name":"C++","_id":"cjgmb0nk3000dqcvepban9ous"},{"name":"ubuntu系统","_id":"cjgmb0nk7000hqcvea5y2ic0g"},{"name":"Opencv","parent":"cjgmb0njr0004qcve8m1gio3a","_id":"cjgmb0nka000mqcve5wgzbwlz"}],"Data":[],"Page":[{"title":"search","date":"2018-04-21T04:00:25.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-04-21 12:00:25\n---\n","updated":"2018-04-21T04:00:25.791Z","path":"search/index.html","comments":1,"layout":"page","_id":"cjgmb0njl0001qcvefb9613mv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tag Cloud","date":"2018-04-20T17:17:33.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tag Cloud\ndate: 2018-04-21 01:17:33\ntype: \"tags\"\n\ncomments: false\n---\n","updated":"2018-04-21T09:34:39.888Z","path":"tags/index.html","layout":"page","_id":"cjgmb0njp0003qcve9hrn8r7f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-04-20T17:21:12.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-04-21 01:21:12\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-04-20T17:22:05.500Z","path":"categories/index.html","layout":"page","_id":"cjgmb0nju0007qcveh5mmsyv0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"dlib安装总结","comments":1,"sitemap":false,"grammar_cjkRuby":true,"_content":"2017-8-10\n\n\n\n### 1.dlib安装步骤\nubuntu下最好别用anaconda，会出现很多问题，宁可自己安装各种包！\n\n\n>sudo apt-get install build-essential cmake\nsudo apt-get install libgtk-3-dev\nsudo apt-get install libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev  # 提高cpu处理速度\n#pip install scikit-image\nsudo apt-get install python-skimage\npip install dlib\n\n\n如果pip安装失败，可以直接从pypi上下载安装包，离线安装！\n如果dlib指令安装失败还可以编译源码，源码里使用`sudo python setup.py install`，就可以安装了，仅python的API，前提是setuptools已经安装完成。\n\n### 2.ubuntu16.06安装opencv3.3\n\n1.安装各种依赖库\n>[compiler] `sudo apt-get install build-essential`\n[required] `sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev`\n[optional] `sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev`\n\n2.下载源码后生成编译文件\n2.1创建一个文件夹用来放cmake后的编译文件\n>cd ~/opencv\nmkdir build\ncd build\n\n2.2cmake后创建make所需的文件\n> `cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..`\n\nbuild文件夹下会产生makefile文件用于编译，cmake的编译选项还有其他的，但目前用上面的就够了，python的接口也包含进去了\n\n3.编译源码产生对象文件(**.o**文件)\n>`make -j4` # j4表示开启4个线程\n>`sudo make install` # 安装opencv库到系统中\n\n4. 配置opencv.conf file ，加入环境变量\n\n![enter description here][1]\n\n\n> ` sudo gedit /etc/ld.so.conf.d/opencv.conf`\n> \n如果没有该文件，则上述的命令会创建该文件，在opencv.conf里面加入 `/usr/local/lib`\n\n> `sudo ldconfig` #更新库目录\n----------------------------------------------------------------------------\n[Ubuntu 安装OpenCV3.0.0][3] blog里还有下述步骤：\n打开文件`bash.bashrc`\n>`sudo gedit /etc/bash.bashrc`\n>\n加入下面两行\n>`PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig`\n`export PKG_CONFIG_PATH`\n\n我这里进行测试，没有该步骤也行！\n\n-------------------------------\n\n5.测试opencv\n5.1 C++版本\n\n``` cpp\n#include \"opencv2/opencv.hpp\"\nusing namespace cv;  \nint main() {    \nMat src = imread(\"test3.jpg\",1); \nimshow(\"src\",src);   \nwaitKey(0);  \nreturn 0; }\n```\n编译方式：\n1 命令行\n```shell\ng++  opencvtest.cpp -o opencvtest `pkg-config  --cflags --libs opencv` \n```\n\ncflags前面是两个横线\n\n2 借助cmake，写CMakeLists.txt\n\n```cmake\ncmake_minimum_required(VERSION 2.8)\nproject(opencvtest)\nfind_package( OpenCV REQUIRED )\nadd_executable( opencvtest opencvtest.cpp )\ntarget_link_libraries( opencvtest ${OpenCV_LIBS} )\n```\n之后 执行\n>`cmake .`\n`Make`   # 生成可执行文件\n`./ test` # 运行程序进行测试\n\n5.2python版本\n```python\nimport cv2\nimg = cv2.imread('test3.jpg',1)\ncv2.imshow('img',img)\ncv2.waitKey(0)\n```\n>`python test.py` #运行该出现，会显示一张图片\n\n至此opencv的配置完成！\n\n  ### 3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\n  >`cheese`  #在ubuntu里可以打开摄像头\n  \n  如果打不开，则需要设置virtualbox。\n  1.首先去官网下载virtualbox的扩展包进行安装，如下图：\n  \n  ![enter description here][4]\n  \n\n 2. 然后设置虚拟机的usb选项，并勾选设备选项里的摄像头选项\n\n![enter description here][5]\n \n ![enter description here][6]\n\n  \n  设置好后再使用`cheese`指令打开摄像头，或运行与摄像头相关的程序，由于是虚拟机的原因摄像头比较卡。\n  \n ### 4.whl文件安装中的问题处理\n 原文件： `opencv_python-3.1.0-cp34-cp34m-win_amd64.whl`，\n改后的文件：`opencv_python-3.1.0-cp34-none-win_amd64.whl`\n **把原来文件名中间的cp34m变为none(其实不改也能安装成功)，并且cp34要和python的版本对应，如cp36表示python版本3.6，如果不改的话不然会出现下面的问题：(但只是更改版本号可能会带来兼容性问题)**\n \nopencv_python-3.1.0-cp34-cp34m-win_amd64.whl is not a supported wheel on this platform.\n\n\n\n> pip3 install 路径名\\opencv_python-3.1.0-cp34-none-win_amd64.whl\n> 安装该模块 \n\n### 5. **pip换源提升安装库的速度和稳定性**\n网上有很多可用的源，\n豆瓣：http://pypi.douban.com/simple/\n 清华：https://pypi.tuna.tsinghua.edu.cn/simple\n \n `pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 库名` 这样就会从清华这边的镜像去安装库。\n \n 更改配置文件：\n1.Linux系统\n修改` ~/.pip/pip.conf` (没有就创建一个)， 修改 index-url至tuna，内容如下：\n ```\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n ```\n\n2.windows\n直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件**pip.ini**，内容如下\n ```\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n ```\n \n   <font color=red face=\"宋体\">进过不断的试错，总结如下：\n   1.首先为pip换源，这样大部分的库可以直接指令安装\n   2.换源后安装失败的，可以在[source1][7]和[source2][8]下载whl文件离线安装\n   3.大部分依赖库安装失败都是下载失败导致，所以上述两种方法可以解决大部分问题</font>\n   \n [更改pip源至国内镜像，显著提升下载速度][9]\n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/error1.jpg \"不进行此步骤出现的错误\"\n  [3]: http://jingpin.jikexueyuan.com/article/36054.html\n  [4]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox0.jpg \"3.1 安装扩展包\"\n  [5]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox.jpg \"3.2 设置usb控制器为usb2.0\"\n  [6]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox2_1.jpg \"3.3 勾选设备选项里的摄像头\"\n  [7]: http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n  [8]: https://pypi.python.org/pypi\n  [9]: http://blog.csdn.net/qw_xingzhe/article/details/52675158","source":"_posts/dlib安装总结.md","raw":"---\ntitle: dlib安装总结 \ntags: [Python,dlib,opencv]\ncategories:\n- Python\n- Opencv\ncomments: true\nsitemap: false\ngrammar_cjkRuby: true\n---\n2017-8-10\n\n\n\n### 1.dlib安装步骤\nubuntu下最好别用anaconda，会出现很多问题，宁可自己安装各种包！\n\n\n>sudo apt-get install build-essential cmake\nsudo apt-get install libgtk-3-dev\nsudo apt-get install libboost-all-dev\nsudo apt-get install libopenblas-dev liblapack-dev  # 提高cpu处理速度\n#pip install scikit-image\nsudo apt-get install python-skimage\npip install dlib\n\n\n如果pip安装失败，可以直接从pypi上下载安装包，离线安装！\n如果dlib指令安装失败还可以编译源码，源码里使用`sudo python setup.py install`，就可以安装了，仅python的API，前提是setuptools已经安装完成。\n\n### 2.ubuntu16.06安装opencv3.3\n\n1.安装各种依赖库\n>[compiler] `sudo apt-get install build-essential`\n[required] `sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev`\n[optional] `sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev`\n\n2.下载源码后生成编译文件\n2.1创建一个文件夹用来放cmake后的编译文件\n>cd ~/opencv\nmkdir build\ncd build\n\n2.2cmake后创建make所需的文件\n> `cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..`\n\nbuild文件夹下会产生makefile文件用于编译，cmake的编译选项还有其他的，但目前用上面的就够了，python的接口也包含进去了\n\n3.编译源码产生对象文件(**.o**文件)\n>`make -j4` # j4表示开启4个线程\n>`sudo make install` # 安装opencv库到系统中\n\n4. 配置opencv.conf file ，加入环境变量\n\n![enter description here][1]\n\n\n> ` sudo gedit /etc/ld.so.conf.d/opencv.conf`\n> \n如果没有该文件，则上述的命令会创建该文件，在opencv.conf里面加入 `/usr/local/lib`\n\n> `sudo ldconfig` #更新库目录\n----------------------------------------------------------------------------\n[Ubuntu 安装OpenCV3.0.0][3] blog里还有下述步骤：\n打开文件`bash.bashrc`\n>`sudo gedit /etc/bash.bashrc`\n>\n加入下面两行\n>`PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig`\n`export PKG_CONFIG_PATH`\n\n我这里进行测试，没有该步骤也行！\n\n-------------------------------\n\n5.测试opencv\n5.1 C++版本\n\n``` cpp\n#include \"opencv2/opencv.hpp\"\nusing namespace cv;  \nint main() {    \nMat src = imread(\"test3.jpg\",1); \nimshow(\"src\",src);   \nwaitKey(0);  \nreturn 0; }\n```\n编译方式：\n1 命令行\n```shell\ng++  opencvtest.cpp -o opencvtest `pkg-config  --cflags --libs opencv` \n```\n\ncflags前面是两个横线\n\n2 借助cmake，写CMakeLists.txt\n\n```cmake\ncmake_minimum_required(VERSION 2.8)\nproject(opencvtest)\nfind_package( OpenCV REQUIRED )\nadd_executable( opencvtest opencvtest.cpp )\ntarget_link_libraries( opencvtest ${OpenCV_LIBS} )\n```\n之后 执行\n>`cmake .`\n`Make`   # 生成可执行文件\n`./ test` # 运行程序进行测试\n\n5.2python版本\n```python\nimport cv2\nimg = cv2.imread('test3.jpg',1)\ncv2.imshow('img',img)\ncv2.waitKey(0)\n```\n>`python test.py` #运行该出现，会显示一张图片\n\n至此opencv的配置完成！\n\n  ### 3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\n  >`cheese`  #在ubuntu里可以打开摄像头\n  \n  如果打不开，则需要设置virtualbox。\n  1.首先去官网下载virtualbox的扩展包进行安装，如下图：\n  \n  ![enter description here][4]\n  \n\n 2. 然后设置虚拟机的usb选项，并勾选设备选项里的摄像头选项\n\n![enter description here][5]\n \n ![enter description here][6]\n\n  \n  设置好后再使用`cheese`指令打开摄像头，或运行与摄像头相关的程序，由于是虚拟机的原因摄像头比较卡。\n  \n ### 4.whl文件安装中的问题处理\n 原文件： `opencv_python-3.1.0-cp34-cp34m-win_amd64.whl`，\n改后的文件：`opencv_python-3.1.0-cp34-none-win_amd64.whl`\n **把原来文件名中间的cp34m变为none(其实不改也能安装成功)，并且cp34要和python的版本对应，如cp36表示python版本3.6，如果不改的话不然会出现下面的问题：(但只是更改版本号可能会带来兼容性问题)**\n \nopencv_python-3.1.0-cp34-cp34m-win_amd64.whl is not a supported wheel on this platform.\n\n\n\n> pip3 install 路径名\\opencv_python-3.1.0-cp34-none-win_amd64.whl\n> 安装该模块 \n\n### 5. **pip换源提升安装库的速度和稳定性**\n网上有很多可用的源，\n豆瓣：http://pypi.douban.com/simple/\n 清华：https://pypi.tuna.tsinghua.edu.cn/simple\n \n `pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 库名` 这样就会从清华这边的镜像去安装库。\n \n 更改配置文件：\n1.Linux系统\n修改` ~/.pip/pip.conf` (没有就创建一个)， 修改 index-url至tuna，内容如下：\n ```\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n ```\n\n2.windows\n直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件**pip.ini**，内容如下\n ```\n [global]\n index-url = https://pypi.tuna.tsinghua.edu.cn/simple\n ```\n \n   <font color=red face=\"宋体\">进过不断的试错，总结如下：\n   1.首先为pip换源，这样大部分的库可以直接指令安装\n   2.换源后安装失败的，可以在[source1][7]和[source2][8]下载whl文件离线安装\n   3.大部分依赖库安装失败都是下载失败导致，所以上述两种方法可以解决大部分问题</font>\n   \n [更改pip源至国内镜像，显著提升下载速度][9]\n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/error1.jpg \"不进行此步骤出现的错误\"\n  [3]: http://jingpin.jikexueyuan.com/article/36054.html\n  [4]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox0.jpg \"3.1 安装扩展包\"\n  [5]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox.jpg \"3.2 设置usb控制器为usb2.0\"\n  [6]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox2_1.jpg \"3.3 勾选设备选项里的摄像头\"\n  [7]: http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\n  [8]: https://pypi.python.org/pypi\n  [9]: http://blog.csdn.net/qw_xingzhe/article/details/52675158","slug":"dlib安装总结","published":1,"date":"2018-04-21T14:00:43.866Z","updated":"2018-04-21T16:01:08.460Z","layout":"post","photos":[],"link":"","_id":"cjgmb0njf0000qcvevywetqkv","content":"<p>2017-8-10</p>\n<h3 id=\"1-dlib安装步骤\"><a href=\"#1-dlib安装步骤\" class=\"headerlink\" title=\"1.dlib安装步骤\"></a>1.dlib安装步骤</h3><p>ubuntu下最好别用anaconda，会出现很多问题，宁可自己安装各种包！</p>\n<blockquote>\n<p>sudo apt-get install build-essential cmake<br>sudo apt-get install libgtk-3-dev<br>sudo apt-get install libboost-all-dev<br>sudo apt-get install libopenblas-dev liblapack-dev  # 提高cpu处理速度</p>\n</blockquote>\n<p>#pip install scikit-image<br>sudo apt-get install python-skimage<br>pip install dlib</p>\n<p>如果pip安装失败，可以直接从pypi上下载安装包，离线安装！<br>如果dlib指令安装失败还可以编译源码，源码里使用<code>sudo python setup.py install</code>，就可以安装了，仅python的API，前提是setuptools已经安装完成。</p>\n<h3 id=\"2-ubuntu16-06安装opencv3-3\"><a href=\"#2-ubuntu16-06安装opencv3-3\" class=\"headerlink\" title=\"2.ubuntu16.06安装opencv3.3\"></a>2.ubuntu16.06安装opencv3.3</h3><p>1.安装各种依赖库</p>\n<blockquote>\n<p>[compiler] <code>sudo apt-get install build-essential</code><br>[required] <code>sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</code><br>[optional] <code>sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></p>\n</blockquote>\n<p>2.下载源码后生成编译文件<br>2.1创建一个文件夹用来放cmake后的编译文件</p>\n<blockquote>\n<p>cd ~/opencv<br>mkdir build<br>cd build</p>\n</blockquote>\n<p>2.2cmake后创建make所需的文件</p>\n<blockquote>\n<p><code>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</code></p>\n</blockquote>\n<p>build文件夹下会产生makefile文件用于编译，cmake的编译选项还有其他的，但目前用上面的就够了，python的接口也包含进去了</p>\n<p>3.编译源码产生对象文件(<strong>.o</strong>文件)</p>\n<blockquote>\n<p><code>make -j4</code> # j4表示开启4个线程<br><code>sudo make install</code> # 安装opencv库到系统中</p>\n</blockquote>\n<ol start=\"4\">\n<li>配置opencv.conf file ，加入环境变量</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/error1.jpg\" alt=\"enter description here\" title=\"不进行此步骤出现的错误\"></p>\n<blockquote>\n<p><code>sudo gedit /etc/ld.so.conf.d/opencv.conf</code></p>\n</blockquote>\n<p>如果没有该文件，则上述的命令会创建该文件，在opencv.conf里面加入 <code>/usr/local/lib</code></p>\n<blockquote>\n<p><code>sudo ldconfig</code> #更新库目录</p>\n</blockquote>\n<hr>\n<p><a href=\"http://jingpin.jikexueyuan.com/article/36054.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 安装OpenCV3.0.0</a> blog里还有下述步骤：<br>打开文件<code>bash.bashrc</code></p>\n<blockquote>\n<p><code>sudo gedit /etc/bash.bashrc</code></p>\n</blockquote>\n<p>加入下面两行</p>\n<blockquote>\n<p><code>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig</code><br><code>export PKG_CONFIG_PATH</code></p>\n</blockquote>\n<p>我这里进行测试，没有该步骤也行！</p>\n<hr>\n<p>5.测试opencv<br>5.1 C++版本</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/opencv.hpp\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;    </span><br><span class=\"line\">Mat src = imread(<span class=\"string\">\"test3.jpg\"</span>,<span class=\"number\">1</span>); </span><br><span class=\"line\">imshow(<span class=\"string\">\"src\"</span>,src);   </span><br><span class=\"line\">waitKey(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>编译方式：<br>1 命令行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++  opencvtest.cpp -o opencvtest `pkg-config  --cflags --libs opencv`</span><br></pre></td></tr></table></figure></p>\n<p>cflags前面是两个横线</p>\n<p>2 借助cmake，写CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(opencvtest)</span><br><span class=\"line\"><span class=\"keyword\">find_package</span>( OpenCV REQUIRED )</span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>( opencvtest opencvtest.cpp )</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>( opencvtest <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>\n<p>之后 执行</p>\n<blockquote>\n<p><code>cmake .</code><br><code>Make</code>   # 生成可执行文件<br><code>./ test</code> # 运行程序进行测试</p>\n</blockquote>\n<p>5.2python版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'test3.jpg'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">'img'</span>,img)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>python test.py</code> #运行该出现，会显示一张图片</p>\n</blockquote>\n<p>至此opencv的配置完成！</p>\n<h3 id=\"3-virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\"><a href=\"#3-virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\" class=\"headerlink\" title=\"3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\"></a>3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头</h3><blockquote>\n<p><code>cheese</code>  #在ubuntu里可以打开摄像头</p>\n</blockquote>\n<p>  如果打不开，则需要设置virtualbox。<br>  1.首先去官网下载virtualbox的扩展包进行安装，如下图：</p>\n<p>  <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox0.jpg\" alt=\"enter description here\" title=\"3.1 安装扩展包\"></p>\n<ol start=\"2\">\n<li>然后设置虚拟机的usb选项，并勾选设备选项里的摄像头选项</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox.jpg\" alt=\"enter description here\" title=\"3.2 设置usb控制器为usb2.0\"></p>\n<p> <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox2_1.jpg\" alt=\"enter description here\" title=\"3.3 勾选设备选项里的摄像头\"></p>\n<p>  设置好后再使用<code>cheese</code>指令打开摄像头，或运行与摄像头相关的程序，由于是虚拟机的原因摄像头比较卡。</p>\n<h3 id=\"4-whl文件安装中的问题处理\"><a href=\"#4-whl文件安装中的问题处理\" class=\"headerlink\" title=\"4.whl文件安装中的问题处理\"></a>4.whl文件安装中的问题处理</h3><p> 原文件： <code>opencv_python-3.1.0-cp34-cp34m-win_amd64.whl</code>，<br>改后的文件：<code>opencv_python-3.1.0-cp34-none-win_amd64.whl</code><br> <strong>把原来文件名中间的cp34m变为none(其实不改也能安装成功)，并且cp34要和python的版本对应，如cp36表示python版本3.6，如果不改的话不然会出现下面的问题：(但只是更改版本号可能会带来兼容性问题)</strong></p>\n<p>opencv_python-3.1.0-cp34-cp34m-win_amd64.whl is not a supported wheel on this platform.</p>\n<blockquote>\n<p>pip3 install 路径名\\opencv_python-3.1.0-cp34-none-win_amd64.whl<br>安装该模块 </p>\n</blockquote>\n<h3 id=\"5-pip换源提升安装库的速度和稳定性\"><a href=\"#5-pip换源提升安装库的速度和稳定性\" class=\"headerlink\" title=\"5. pip换源提升安装库的速度和稳定性\"></a>5. <strong>pip换源提升安装库的速度和稳定性</strong></h3><p>网上有很多可用的源，<br>豆瓣：<a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.douban.com/simple/</a><br> 清华：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>\n<p> <code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 库名</code> 这样就会从清华这边的镜像去安装库。</p>\n<p> 更改配置文件：<br>1.Linux系统<br>修改<code>~/.pip/pip.conf</code> (没有就创建一个)， 修改 index-url至tuna，内容如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>2.windows<br>直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件<strong>pip.ini</strong>，内容如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n   <font color=\"red\" face=\"宋体\">进过不断的试错，总结如下：<br>   1.首先为pip换源，这样大部分的库可以直接指令安装<br>   2.换源后安装失败的，可以在<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\" target=\"_blank\" rel=\"noopener\">source1</a>和<a href=\"https://pypi.python.org/pypi\" target=\"_blank\" rel=\"noopener\">source2</a>下载whl文件离线安装<br>   3.大部分依赖库安装失败都是下载失败导致，所以上述两种方法可以解决大部分问题</font>\n\n<p> <a href=\"http://blog.csdn.net/qw_xingzhe/article/details/52675158\" target=\"_blank\" rel=\"noopener\">更改pip源至国内镜像，显著提升下载速度</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>2017-8-10</p>\n<h3 id=\"1-dlib安装步骤\"><a href=\"#1-dlib安装步骤\" class=\"headerlink\" title=\"1.dlib安装步骤\"></a>1.dlib安装步骤</h3><p>ubuntu下最好别用anaconda，会出现很多问题，宁可自己安装各种包！</p>\n<blockquote>\n<p>sudo apt-get install build-essential cmake<br>sudo apt-get install libgtk-3-dev<br>sudo apt-get install libboost-all-dev<br>sudo apt-get install libopenblas-dev liblapack-dev  # 提高cpu处理速度</p>\n</blockquote>\n<p>#pip install scikit-image<br>sudo apt-get install python-skimage<br>pip install dlib</p>\n<p>如果pip安装失败，可以直接从pypi上下载安装包，离线安装！<br>如果dlib指令安装失败还可以编译源码，源码里使用<code>sudo python setup.py install</code>，就可以安装了，仅python的API，前提是setuptools已经安装完成。</p>\n<h3 id=\"2-ubuntu16-06安装opencv3-3\"><a href=\"#2-ubuntu16-06安装opencv3-3\" class=\"headerlink\" title=\"2.ubuntu16.06安装opencv3.3\"></a>2.ubuntu16.06安装opencv3.3</h3><p>1.安装各种依赖库</p>\n<blockquote>\n<p>[compiler] <code>sudo apt-get install build-essential</code><br>[required] <code>sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev</code><br>[optional] <code>sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev</code></p>\n</blockquote>\n<p>2.下载源码后生成编译文件<br>2.1创建一个文件夹用来放cmake后的编译文件</p>\n<blockquote>\n<p>cd ~/opencv<br>mkdir build<br>cd build</p>\n</blockquote>\n<p>2.2cmake后创建make所需的文件</p>\n<blockquote>\n<p><code>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</code></p>\n</blockquote>\n<p>build文件夹下会产生makefile文件用于编译，cmake的编译选项还有其他的，但目前用上面的就够了，python的接口也包含进去了</p>\n<p>3.编译源码产生对象文件(<strong>.o</strong>文件)</p>\n<blockquote>\n<p><code>make -j4</code> # j4表示开启4个线程<br><code>sudo make install</code> # 安装opencv库到系统中</p>\n</blockquote>\n<ol start=\"4\">\n<li>配置opencv.conf file ，加入环境变量</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/error1.jpg\" alt=\"enter description here\" title=\"不进行此步骤出现的错误\"></p>\n<blockquote>\n<p><code>sudo gedit /etc/ld.so.conf.d/opencv.conf</code></p>\n</blockquote>\n<p>如果没有该文件，则上述的命令会创建该文件，在opencv.conf里面加入 <code>/usr/local/lib</code></p>\n<blockquote>\n<p><code>sudo ldconfig</code> #更新库目录</p>\n</blockquote>\n<hr>\n<p><a href=\"http://jingpin.jikexueyuan.com/article/36054.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 安装OpenCV3.0.0</a> blog里还有下述步骤：<br>打开文件<code>bash.bashrc</code></p>\n<blockquote>\n<p><code>sudo gedit /etc/bash.bashrc</code></p>\n</blockquote>\n<p>加入下面两行</p>\n<blockquote>\n<p><code>PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig</code><br><code>export PKG_CONFIG_PATH</code></p>\n</blockquote>\n<p>我这里进行测试，没有该步骤也行！</p>\n<hr>\n<p>5.测试opencv<br>5.1 C++版本</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"opencv2/opencv.hpp\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> cv;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;    </span><br><span class=\"line\">Mat src = imread(<span class=\"string\">\"test3.jpg\"</span>,<span class=\"number\">1</span>); </span><br><span class=\"line\">imshow(<span class=\"string\">\"src\"</span>,src);   </span><br><span class=\"line\">waitKey(<span class=\"number\">0</span>);  </span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n<p>编译方式：<br>1 命令行<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g++  opencvtest.cpp -o opencvtest `pkg-config  --cflags --libs opencv`</span><br></pre></td></tr></table></figure></p>\n<p>cflags前面是两个横线</p>\n<p>2 借助cmake，写CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">2.8</span>)</span><br><span class=\"line\"><span class=\"keyword\">project</span>(opencvtest)</span><br><span class=\"line\"><span class=\"keyword\">find_package</span>( OpenCV REQUIRED )</span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>( opencvtest opencvtest.cpp )</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>( opencvtest <span class=\"variable\">$&#123;OpenCV_LIBS&#125;</span> )</span><br></pre></td></tr></table></figure>\n<p>之后 执行</p>\n<blockquote>\n<p><code>cmake .</code><br><code>Make</code>   # 生成可执行文件<br><code>./ test</code> # 运行程序进行测试</p>\n</blockquote>\n<p>5.2python版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\">img = cv2.imread(<span class=\"string\">'test3.jpg'</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">cv2.imshow(<span class=\"string\">'img'</span>,img)</span><br><span class=\"line\">cv2.waitKey(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><code>python test.py</code> #运行该出现，会显示一张图片</p>\n</blockquote>\n<p>至此opencv的配置完成！</p>\n<h3 id=\"3-virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\"><a href=\"#3-virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\" class=\"headerlink\" title=\"3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头\"></a>3.virtualbox虚拟机的ubuntu系统下打开笔记本自带的摄像头</h3><blockquote>\n<p><code>cheese</code>  #在ubuntu里可以打开摄像头</p>\n</blockquote>\n<p>  如果打不开，则需要设置virtualbox。<br>  1.首先去官网下载virtualbox的扩展包进行安装，如下图：</p>\n<p>  <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox0.jpg\" alt=\"enter description here\" title=\"3.1 安装扩展包\"></p>\n<ol start=\"2\">\n<li>然后设置虚拟机的usb选项，并勾选设备选项里的摄像头选项</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox.jpg\" alt=\"enter description here\" title=\"3.2 设置usb控制器为usb2.0\"></p>\n<p> <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/virtualbox2_1.jpg\" alt=\"enter description here\" title=\"3.3 勾选设备选项里的摄像头\"></p>\n<p>  设置好后再使用<code>cheese</code>指令打开摄像头，或运行与摄像头相关的程序，由于是虚拟机的原因摄像头比较卡。</p>\n<h3 id=\"4-whl文件安装中的问题处理\"><a href=\"#4-whl文件安装中的问题处理\" class=\"headerlink\" title=\"4.whl文件安装中的问题处理\"></a>4.whl文件安装中的问题处理</h3><p> 原文件： <code>opencv_python-3.1.0-cp34-cp34m-win_amd64.whl</code>，<br>改后的文件：<code>opencv_python-3.1.0-cp34-none-win_amd64.whl</code><br> <strong>把原来文件名中间的cp34m变为none(其实不改也能安装成功)，并且cp34要和python的版本对应，如cp36表示python版本3.6，如果不改的话不然会出现下面的问题：(但只是更改版本号可能会带来兼容性问题)</strong></p>\n<p>opencv_python-3.1.0-cp34-cp34m-win_amd64.whl is not a supported wheel on this platform.</p>\n<blockquote>\n<p>pip3 install 路径名\\opencv_python-3.1.0-cp34-none-win_amd64.whl<br>安装该模块 </p>\n</blockquote>\n<h3 id=\"5-pip换源提升安装库的速度和稳定性\"><a href=\"#5-pip换源提升安装库的速度和稳定性\" class=\"headerlink\" title=\"5. pip换源提升安装库的速度和稳定性\"></a>5. <strong>pip换源提升安装库的速度和稳定性</strong></h3><p>网上有很多可用的源，<br>豆瓣：<a href=\"http://pypi.douban.com/simple/\" target=\"_blank\" rel=\"noopener\">http://pypi.douban.com/simple/</a><br> 清华：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>\n<p> <code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 库名</code> 这样就会从清华这边的镜像去安装库。</p>\n<p> 更改配置文件：<br>1.Linux系统<br>修改<code>~/.pip/pip.conf</code> (没有就创建一个)， 修改 index-url至tuna，内容如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n<p>2.windows<br>直接在user目录中创建一个pip目录，如：C:\\Users\\xx\\pip，新建文件<strong>pip.ini</strong>，内容如下<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>\n   <font color=\"red\" face=\"宋体\">进过不断的试错，总结如下：<br>   1.首先为pip换源，这样大部分的库可以直接指令安装<br>   2.换源后安装失败的，可以在<a href=\"http://www.lfd.uci.edu/~gohlke/pythonlibs/#opencv\" target=\"_blank\" rel=\"noopener\">source1</a>和<a href=\"https://pypi.python.org/pypi\" target=\"_blank\" rel=\"noopener\">source2</a>下载whl文件离线安装<br>   3.大部分依赖库安装失败都是下载失败导致，所以上述两种方法可以解决大部分问题</font>\n\n<p> <a href=\"http://blog.csdn.net/qw_xingzhe/article/details/52675158\" target=\"_blank\" rel=\"noopener\">更改pip源至国内镜像，显著提升下载速度</a></p>\n"},{"title":"docker在ubuntu上的安装及使用","comments":1,"sitemap":false,"grammar_cjkRuby":true,"_content":"2018-3-30\n\n#### **1.安装前的准备工作**\n 1. 确保是64位的操作系统\n 2. 卸载旧版本的docker\n`sudo apt-get remove docker docker-engine docker.io`\ndockerde相关文件都在`/var/lib/docker/`路径下\n\n#### **2.使用docker仓库安装**\n> **首次安装docker时需要添加docker的仓库**\n\n 1. 更新软件源的仓库信息\n `sudo apt-get update`\n 2. 安装包来使apt通过HTTPS来使用docker仓库\n  `sudo apt-get install apt-transport-https ca-certificates \\`\n  `curl software-properties-common`\t\n 3. 添加docker的官方GPG证书\n`curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\`\n`| sudo apt-key add -`\n4. 验证是否添加成功带有fingerprint的key\n`sudo apt-key fingerprint 0EBFCD88`\n5. 添加稳定的docker仓库\n`sudo add-apt-repository \\`\n  ` \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\`\n  ` $(lsb_release -cs) stable\"`\n> **安装docker-ce**\n\n1. 再次更新仓库信息\n`sudo apt-get update`\n2. 指令安装docker\n注意:`sudo apt-get install docker-ce`只能安装目前最高的版本,但通常使用下面方法来选择要安装的版本\n`apt-cache madison docker-ce`查看目前的多个版本,结果如下:\n\n\n\n![目前docker-ce的版本][1]\n 使用`sudo apt-get install docker-ce=<VERSION>`安装特定的版本,这里使用17.12.0版本,指令为:`sudo apt-get install docker-ce=17.12.0~ce-0~ubuntu`\n\n3. 验证安装的结果\n如果安装docker安装正确,则运行`sudo docker run hello-world`后输出下面结果:\n\n![docker安装成功][2]\n\n- 其他详细的安装详情见官网 [https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1][3]\n\n\n#### **4.创建docker组**\n> 该操作的作用:不用每次使用docker指令时都输入sudo\n1. 创建docker组\n`sudo groupadd docker`创建docker组\n`cat /etc/group | grep -i docker`查看docker组的基本情况如下,目前该组中还没有添加用户:\n\n![enter description here][4]\n2.为docker组添加用户\n`sudo usermod -aG docker $USER`,其中`$USER`表示当前的用户,再次查看docker用户组的信息如下,该组中多了个david用户(当前登录的用户):\n3. 注销登录后,用户组生效,就可以直接使用不带sudo的docker指令\n\n![enter description here][5]\n\n#### **5.安装nvidia-docker来支持GPU**\n1. 卸载旧版本的nvidia-docker及GPU容器\n`docker volume ls -q -f driver=nvidia-docker |  \\`\n`xargs -r -I{} -n1 docker ps -q -a -f volume={} | \\` \n`xargs -r docker rm -f`\n`sudo apt-get purge -y nvidia-docker`\n2. 添加仓库\n  - 添加key:\n`curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\n  sudo apt-key add -`\n  -  获取系统版本号:\n `distribution=$(. /etc/os-release;echo $ID$VERSION_ID)` \n  - 添加仓库:\n `curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\`\n  `sudo tee /etc/apt/sources.list.d/nvidia-docker.list` \n 3. 更新仓库信息\n `sudo apt-get update`\n4. **安装nvidia-docker2并配置docker dameon加速镜像下载**\n - 安装nvidia的gpu支持:\n `sudo apt-get install -y nvidia-docker2`\n - 修改`/etc/docker/daemon.json`文件内容如下:\n ```json\n {\n  \"registry-mirrors\": [\"http://58167a06.m.daocloud.io\"],\n  \"runtimes\": {\n        \"nvidia\": {\n            \"path\": \"/usr/bin/nvidia-container-runtime\",\n            \"runtimeArgs\": []\n        }\n    }\n}\n ```\n 其中链接部分是使用国内的**加速镜像**,这里使用dalcloud的加速镜像,如果使用阿里云的加速镜像,将链接替换为[https://8vntriz8.mirror.aliyuncs.com][6]即可,该链接是在注册阿里开发者平台时生成的,具体的细节见[https://www.cnblogs.com/atuotuo/p/6264800.html][7].\n \n - 重载daemon使配置生效,并重启docker:\n`sudo pkill -SIGHUP dockerd`\n`sudo systemctl daemon-reload`\n`sudo systemctl restart docker`\n\n5. 测试安装情况\n`docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi`会下载cuda镜像来测试\n\n#### **5.使用docker安装tensorflow**\n- 打开tensorflow的docker[镜像仓库][8]如下:\n\n![tensorflow镜像][9]\n使用指令`nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:<mirror tag>`下载并运行tag对应的镜像,这里使用tag为1.7.0-gpu-py3的镜像输出结果如下.\n\n![运行tensorflow的镜像][10]\n将最下面的链接复制到浏览器就可以打开ipython notebook并使用对应的镜像环境了.\n\n- 注意:首次运行上面的指令会下载对应tag的镜像,之后运行可以直接从本地读取该镜像.\n\n- 使用`docker images`查看已下载镜像信息,结果如下:\n\n\n![enter description here][11]\n- 使用`docker rmi -f <IMAGE ID>` 删除对应ID号的镜像.\n\n#### **6.将主机的目录挂载到容器中**\n1. 首先使用`docker ps`查看目前运行的容器，结果如下，使用`docker kill <container ID>`关闭ID号对应的容器:\n\n![enter description here][12]\n\n2. 使用`docker exec -it 2783ad1bf2dc /bin/bash`登录该容器,其中`2783ad1bf2dc`为第一步的结果中看到的容器ID号,登录的结果如下:\n\n![enter description here][13]\n> 登录成功后,终端的用户和工作组组也随着改变,该容器的目录结构与一般的Linux相同,输入`exit`或使用按键`ctrl + d`退出登录状态.\n\n> OPTIONS说明：\n -  -d :分离模式: 在后台运行\n -  -i :标准输入,即使没有附加也保持STDIN 打开\n- -t :分配一个伪终端,后面必须加`/bin/bash`\n\n3. 这里将`/home/david/docker/tensorflow`目录挂载到1.7.0-gpu-py3容器的`/notebooks/tensorflow`目录下,将主机的目录挂载到容器后,修改主机的文件,容器中的文件也会同步更新,这样比较方便,操作如下:\n`docker run -it -v <主机目录>:<容器挂载目录> <容器镜像> /bin/bash`, `-v`表示挂载目录的选项;**冒号**前面是主机目录,后面是容器目录;最后面接容器镜像\n\n>这里的挂载目录操作:\n> `docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow tensorflow/tensorflow:1.7.0-gpu-py3 /bin/bash`\n\n查看挂载结果如下:\n\n![enter description here][14]\n可以看出,在容器的`/notebooks`目录下已经出现了`tensorflow`目录,并且该文件夹下已经出现了在主机目录`/home/david/docker/tensorflow`里的`test.py`文件,即目录挂载成功.\n>**注意:使用下面指令可以一步到位!打开ipython notebook并挂载主机目录到容器.**\n> ` docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow -p 8888:8888 tensorflow/tensorflow:1.7.0-gpu-py3`\n\n运行结果:\n\n![enter description here][15]\n \n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-41-23.png \"目前docker-ce的版本\"\n  [2]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-57-04.png \"docker安装成功\"\n  [3]: https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\n  [4]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-31-44.png \"docker组的信息\"\n  [5]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-34-55.png \"david用户加入docker用户组\"\n  [6]: https://8vntriz8.mirror.aliyuncs.com\n  [7]: https://www.cnblogs.com/atuotuo/p/6264800.html\n  [8]: https://hub.docker.com/r/tensorflow/tensorflow/tags/\n  [9]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-44-02.png \"tensorflow的镜像\"\n  [10]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-53-50.png \"运行tensorflow的镜像\"\n  [11]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2015-02-54.png \"已下载的镜像信息\"\n  [12]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-04-59.png \"查看目前运行的容器\"\n  [13]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-16-41.png \"容器的主目录结构\"\n  [14]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-04-35.png \"主机目录的挂载结果\"\n  [15]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-16-54.png \"运行结果\"\n","source":"_posts/docker在ubuntu上的安装及使用.md","raw":"---\ntitle: docker在ubuntu上的安装及使用 \ntags: [docker]\ncategories:\n- docker\ncomments: true\nsitemap: false\ngrammar_cjkRuby: true\n---\n2018-3-30\n\n#### **1.安装前的准备工作**\n 1. 确保是64位的操作系统\n 2. 卸载旧版本的docker\n`sudo apt-get remove docker docker-engine docker.io`\ndockerde相关文件都在`/var/lib/docker/`路径下\n\n#### **2.使用docker仓库安装**\n> **首次安装docker时需要添加docker的仓库**\n\n 1. 更新软件源的仓库信息\n `sudo apt-get update`\n 2. 安装包来使apt通过HTTPS来使用docker仓库\n  `sudo apt-get install apt-transport-https ca-certificates \\`\n  `curl software-properties-common`\t\n 3. 添加docker的官方GPG证书\n`curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\`\n`| sudo apt-key add -`\n4. 验证是否添加成功带有fingerprint的key\n`sudo apt-key fingerprint 0EBFCD88`\n5. 添加稳定的docker仓库\n`sudo add-apt-repository \\`\n  ` \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\`\n  ` $(lsb_release -cs) stable\"`\n> **安装docker-ce**\n\n1. 再次更新仓库信息\n`sudo apt-get update`\n2. 指令安装docker\n注意:`sudo apt-get install docker-ce`只能安装目前最高的版本,但通常使用下面方法来选择要安装的版本\n`apt-cache madison docker-ce`查看目前的多个版本,结果如下:\n\n\n\n![目前docker-ce的版本][1]\n 使用`sudo apt-get install docker-ce=<VERSION>`安装特定的版本,这里使用17.12.0版本,指令为:`sudo apt-get install docker-ce=17.12.0~ce-0~ubuntu`\n\n3. 验证安装的结果\n如果安装docker安装正确,则运行`sudo docker run hello-world`后输出下面结果:\n\n![docker安装成功][2]\n\n- 其他详细的安装详情见官网 [https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1][3]\n\n\n#### **4.创建docker组**\n> 该操作的作用:不用每次使用docker指令时都输入sudo\n1. 创建docker组\n`sudo groupadd docker`创建docker组\n`cat /etc/group | grep -i docker`查看docker组的基本情况如下,目前该组中还没有添加用户:\n\n![enter description here][4]\n2.为docker组添加用户\n`sudo usermod -aG docker $USER`,其中`$USER`表示当前的用户,再次查看docker用户组的信息如下,该组中多了个david用户(当前登录的用户):\n3. 注销登录后,用户组生效,就可以直接使用不带sudo的docker指令\n\n![enter description here][5]\n\n#### **5.安装nvidia-docker来支持GPU**\n1. 卸载旧版本的nvidia-docker及GPU容器\n`docker volume ls -q -f driver=nvidia-docker |  \\`\n`xargs -r -I{} -n1 docker ps -q -a -f volume={} | \\` \n`xargs -r docker rm -f`\n`sudo apt-get purge -y nvidia-docker`\n2. 添加仓库\n  - 添加key:\n`curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\n  sudo apt-key add -`\n  -  获取系统版本号:\n `distribution=$(. /etc/os-release;echo $ID$VERSION_ID)` \n  - 添加仓库:\n `curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\`\n  `sudo tee /etc/apt/sources.list.d/nvidia-docker.list` \n 3. 更新仓库信息\n `sudo apt-get update`\n4. **安装nvidia-docker2并配置docker dameon加速镜像下载**\n - 安装nvidia的gpu支持:\n `sudo apt-get install -y nvidia-docker2`\n - 修改`/etc/docker/daemon.json`文件内容如下:\n ```json\n {\n  \"registry-mirrors\": [\"http://58167a06.m.daocloud.io\"],\n  \"runtimes\": {\n        \"nvidia\": {\n            \"path\": \"/usr/bin/nvidia-container-runtime\",\n            \"runtimeArgs\": []\n        }\n    }\n}\n ```\n 其中链接部分是使用国内的**加速镜像**,这里使用dalcloud的加速镜像,如果使用阿里云的加速镜像,将链接替换为[https://8vntriz8.mirror.aliyuncs.com][6]即可,该链接是在注册阿里开发者平台时生成的,具体的细节见[https://www.cnblogs.com/atuotuo/p/6264800.html][7].\n \n - 重载daemon使配置生效,并重启docker:\n`sudo pkill -SIGHUP dockerd`\n`sudo systemctl daemon-reload`\n`sudo systemctl restart docker`\n\n5. 测试安装情况\n`docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi`会下载cuda镜像来测试\n\n#### **5.使用docker安装tensorflow**\n- 打开tensorflow的docker[镜像仓库][8]如下:\n\n![tensorflow镜像][9]\n使用指令`nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:<mirror tag>`下载并运行tag对应的镜像,这里使用tag为1.7.0-gpu-py3的镜像输出结果如下.\n\n![运行tensorflow的镜像][10]\n将最下面的链接复制到浏览器就可以打开ipython notebook并使用对应的镜像环境了.\n\n- 注意:首次运行上面的指令会下载对应tag的镜像,之后运行可以直接从本地读取该镜像.\n\n- 使用`docker images`查看已下载镜像信息,结果如下:\n\n\n![enter description here][11]\n- 使用`docker rmi -f <IMAGE ID>` 删除对应ID号的镜像.\n\n#### **6.将主机的目录挂载到容器中**\n1. 首先使用`docker ps`查看目前运行的容器，结果如下，使用`docker kill <container ID>`关闭ID号对应的容器:\n\n![enter description here][12]\n\n2. 使用`docker exec -it 2783ad1bf2dc /bin/bash`登录该容器,其中`2783ad1bf2dc`为第一步的结果中看到的容器ID号,登录的结果如下:\n\n![enter description here][13]\n> 登录成功后,终端的用户和工作组组也随着改变,该容器的目录结构与一般的Linux相同,输入`exit`或使用按键`ctrl + d`退出登录状态.\n\n> OPTIONS说明：\n -  -d :分离模式: 在后台运行\n -  -i :标准输入,即使没有附加也保持STDIN 打开\n- -t :分配一个伪终端,后面必须加`/bin/bash`\n\n3. 这里将`/home/david/docker/tensorflow`目录挂载到1.7.0-gpu-py3容器的`/notebooks/tensorflow`目录下,将主机的目录挂载到容器后,修改主机的文件,容器中的文件也会同步更新,这样比较方便,操作如下:\n`docker run -it -v <主机目录>:<容器挂载目录> <容器镜像> /bin/bash`, `-v`表示挂载目录的选项;**冒号**前面是主机目录,后面是容器目录;最后面接容器镜像\n\n>这里的挂载目录操作:\n> `docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow tensorflow/tensorflow:1.7.0-gpu-py3 /bin/bash`\n\n查看挂载结果如下:\n\n![enter description here][14]\n可以看出,在容器的`/notebooks`目录下已经出现了`tensorflow`目录,并且该文件夹下已经出现了在主机目录`/home/david/docker/tensorflow`里的`test.py`文件,即目录挂载成功.\n>**注意:使用下面指令可以一步到位!打开ipython notebook并挂载主机目录到容器.**\n> ` docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow -p 8888:8888 tensorflow/tensorflow:1.7.0-gpu-py3`\n\n运行结果:\n\n![enter description here][15]\n \n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-41-23.png \"目前docker-ce的版本\"\n  [2]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-57-04.png \"docker安装成功\"\n  [3]: https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\n  [4]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-31-44.png \"docker组的信息\"\n  [5]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-34-55.png \"david用户加入docker用户组\"\n  [6]: https://8vntriz8.mirror.aliyuncs.com\n  [7]: https://www.cnblogs.com/atuotuo/p/6264800.html\n  [8]: https://hub.docker.com/r/tensorflow/tensorflow/tags/\n  [9]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-44-02.png \"tensorflow的镜像\"\n  [10]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-53-50.png \"运行tensorflow的镜像\"\n  [11]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2015-02-54.png \"已下载的镜像信息\"\n  [12]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-04-59.png \"查看目前运行的容器\"\n  [13]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-16-41.png \"容器的主目录结构\"\n  [14]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-04-35.png \"主机目录的挂载结果\"\n  [15]: http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-16-54.png \"运行结果\"\n","slug":"docker在ubuntu上的安装及使用","published":1,"date":"2018-04-30T11:37:29.424Z","updated":"2018-04-30T13:48:01.150Z","layout":"post","photos":[],"link":"","_id":"cjgmb0njn0002qcveginn8jz0","content":"<p>2018-3-30</p>\n<h4 id=\"1-安装前的准备工作\"><a href=\"#1-安装前的准备工作\" class=\"headerlink\" title=\"1.安装前的准备工作\"></a><strong>1.安装前的准备工作</strong></h4><ol>\n<li>确保是64位的操作系统</li>\n<li>卸载旧版本的docker<br><code>sudo apt-get remove docker docker-engine docker.io</code><br>dockerde相关文件都在<code>/var/lib/docker/</code>路径下</li>\n</ol>\n<h4 id=\"2-使用docker仓库安装\"><a href=\"#2-使用docker仓库安装\" class=\"headerlink\" title=\"2.使用docker仓库安装\"></a><strong>2.使用docker仓库安装</strong></h4><blockquote>\n<p><strong>首次安装docker时需要添加docker的仓库</strong></p>\n</blockquote>\n<ol>\n<li>更新软件源的仓库信息<br><code>sudo apt-get update</code></li>\n<li>安装包来使apt通过HTTPS来使用docker仓库<br><code>sudo apt-get install apt-transport-https ca-certificates \\</code><br><code>curl software-properties-common</code>    </li>\n<li>添加docker的官方GPG证书<br><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\</code><br><code>| sudo apt-key add -</code><ol start=\"4\">\n<li>验证是否添加成功带有fingerprint的key<br><code>sudo apt-key fingerprint 0EBFCD88</code></li>\n<li>添加稳定的docker仓库<br><code>sudo add-apt-repository \\</code><br><code>&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</code><br><code>$(lsb_release -cs) stable&quot;</code><blockquote>\n<p><strong>安装docker-ce</strong></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>再次更新仓库信息<br><code>sudo apt-get update</code></li>\n<li>指令安装docker<br>注意:<code>sudo apt-get install docker-ce</code>只能安装目前最高的版本,但通常使用下面方法来选择要安装的版本<br><code>apt-cache madison docker-ce</code>查看目前的多个版本,结果如下:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-41-23.png\" alt=\"目前docker-ce的版本\" title=\"目前docker-ce的版本\"><br> 使用<code>sudo apt-get install docker-ce=&lt;VERSION&gt;</code>安装特定的版本,这里使用17.12.0版本,指令为:<code>sudo apt-get install docker-ce=17.12.0~ce-0~ubuntu</code></p>\n<ol start=\"3\">\n<li>验证安装的结果<br>如果安装docker安装正确,则运行<code>sudo docker run hello-world</code>后输出下面结果:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-57-04.png\" alt=\"docker安装成功\" title=\"docker安装成功\"></p>\n<ul>\n<li>其他详细的安装详情见官网 <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1</a></li>\n</ul>\n<h4 id=\"4-创建docker组\"><a href=\"#4-创建docker组\" class=\"headerlink\" title=\"4.创建docker组\"></a><strong>4.创建docker组</strong></h4><blockquote>\n<p>该操作的作用:不用每次使用docker指令时都输入sudo</p>\n<ol>\n<li>创建docker组<br><code>sudo groupadd docker</code>创建docker组<br><code>cat /etc/group | grep -i docker</code>查看docker组的基本情况如下,目前该组中还没有添加用户:</li>\n</ol>\n</blockquote>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-31-44.png\" alt=\"enter description here\" title=\"docker组的信息\"><br>2.为docker组添加用户<br><code>sudo usermod -aG docker $USER</code>,其中<code>$USER</code>表示当前的用户,再次查看docker用户组的信息如下,该组中多了个david用户(当前登录的用户):</p>\n<ol start=\"3\">\n<li>注销登录后,用户组生效,就可以直接使用不带sudo的docker指令</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-34-55.png\" alt=\"enter description here\" title=\"david用户加入docker用户组\"></p>\n<h4 id=\"5-安装nvidia-docker来支持GPU\"><a href=\"#5-安装nvidia-docker来支持GPU\" class=\"headerlink\" title=\"5.安装nvidia-docker来支持GPU\"></a><strong>5.安装nvidia-docker来支持GPU</strong></h4><ol>\n<li>卸载旧版本的nvidia-docker及GPU容器<br><code>docker volume ls -q -f driver=nvidia-docker |  \\</code><br><code>xargs -r -I{} -n1 docker ps -q -a -f volume={} | \\</code><br><code>xargs -r docker rm -f</code><br><code>sudo apt-get purge -y nvidia-docker</code></li>\n<li>添加仓库<ul>\n<li>添加key:<br><code>curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\nsudo apt-key add -</code></li>\n<li>获取系统版本号:<br><code>distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</code> </li>\n<li>添加仓库:<br><code>curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\</code><br><code>sudo tee /etc/apt/sources.list.d/nvidia-docker.list</code> </li>\n</ul>\n<ol start=\"3\">\n<li>更新仓库信息<br><code>sudo apt-get update</code></li>\n</ol>\n</li>\n<li><p><strong>安装nvidia-docker2并配置docker dameon加速镜像下载</strong></p>\n<ul>\n<li>安装nvidia的gpu支持:<br><code>sudo apt-get install -y nvidia-docker2</code></li>\n<li>修改<code>/etc/docker/daemon.json</code>文件内容如下:<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://58167a06.m.daocloud.io\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"runtimes\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nvidia\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/usr/bin/nvidia-container-runtime\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"runtimeArgs\"</span>: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中链接部分是使用国内的<strong>加速镜像</strong>,这里使用dalcloud的加速镜像,如果使用阿里云的加速镜像,将链接替换为<a href=\"https://8vntriz8.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://8vntriz8.mirror.aliyuncs.com</a>即可,该链接是在注册阿里开发者平台时生成的,具体的细节见<a href=\"https://www.cnblogs.com/atuotuo/p/6264800.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/atuotuo/p/6264800.html</a>.</p>\n<ul>\n<li>重载daemon使配置生效,并重启docker:<br><code>sudo pkill -SIGHUP dockerd</code><br><code>sudo systemctl daemon-reload</code><br><code>sudo systemctl restart docker</code></li>\n</ul>\n</li>\n<li><p>测试安装情况<br><code>docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</code>会下载cuda镜像来测试</p>\n</li>\n</ol>\n<h4 id=\"5-使用docker安装tensorflow\"><a href=\"#5-使用docker安装tensorflow\" class=\"headerlink\" title=\"5.使用docker安装tensorflow\"></a><strong>5.使用docker安装tensorflow</strong></h4><ul>\n<li>打开tensorflow的docker<a href=\"https://hub.docker.com/r/tensorflow/tensorflow/tags/\" target=\"_blank\" rel=\"noopener\">镜像仓库</a>如下:</li>\n</ul>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-44-02.png\" alt=\"tensorflow镜像\" title=\"tensorflow的镜像\"><br>使用指令<code>nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:&lt;mirror tag&gt;</code>下载并运行tag对应的镜像,这里使用tag为1.7.0-gpu-py3的镜像输出结果如下.</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-53-50.png\" alt=\"运行tensorflow的镜像\" title=\"运行tensorflow的镜像\"><br>将最下面的链接复制到浏览器就可以打开ipython notebook并使用对应的镜像环境了.</p>\n<ul>\n<li><p>注意:首次运行上面的指令会下载对应tag的镜像,之后运行可以直接从本地读取该镜像.</p>\n</li>\n<li><p>使用<code>docker images</code>查看已下载镜像信息,结果如下:</p>\n</li>\n</ul>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2015-02-54.png\" alt=\"enter description here\" title=\"已下载的镜像信息\"></p>\n<ul>\n<li>使用<code>docker rmi -f &lt;IMAGE ID&gt;</code> 删除对应ID号的镜像.</li>\n</ul>\n<h4 id=\"6-将主机的目录挂载到容器中\"><a href=\"#6-将主机的目录挂载到容器中\" class=\"headerlink\" title=\"6.将主机的目录挂载到容器中\"></a><strong>6.将主机的目录挂载到容器中</strong></h4><ol>\n<li>首先使用<code>docker ps</code>查看目前运行的容器，结果如下，使用<code>docker kill &lt;container ID&gt;</code>关闭ID号对应的容器:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-04-59.png\" alt=\"enter description here\" title=\"查看目前运行的容器\"></p>\n<ol start=\"2\">\n<li>使用<code>docker exec -it 2783ad1bf2dc /bin/bash</code>登录该容器,其中<code>2783ad1bf2dc</code>为第一步的结果中看到的容器ID号,登录的结果如下:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-16-41.png\" alt=\"enter description here\" title=\"容器的主目录结构\"></p>\n<blockquote>\n<p>登录成功后,终端的用户和工作组组也随着改变,该容器的目录结构与一般的Linux相同,输入<code>exit</code>或使用按键<code>ctrl + d</code>退出登录状态.</p>\n</blockquote>\n<blockquote>\n<p>OPTIONS说明：</p>\n<ul>\n<li>-d :分离模式: 在后台运行</li>\n<li>-i :标准输入,即使没有附加也保持STDIN 打开<ul>\n<li>-t :分配一个伪终端,后面必须加<code>/bin/bash</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>这里将<code>/home/david/docker/tensorflow</code>目录挂载到1.7.0-gpu-py3容器的<code>/notebooks/tensorflow</code>目录下,将主机的目录挂载到容器后,修改主机的文件,容器中的文件也会同步更新,这样比较方便,操作如下:<br><code>docker run -it -v &lt;主机目录&gt;:&lt;容器挂载目录&gt; &lt;容器镜像&gt; /bin/bash</code>, <code>-v</code>表示挂载目录的选项;<strong>冒号</strong>前面是主机目录,后面是容器目录;最后面接容器镜像</li>\n</ol>\n<blockquote>\n<p>这里的挂载目录操作:<br><code>docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow tensorflow/tensorflow:1.7.0-gpu-py3 /bin/bash</code></p>\n</blockquote>\n<p>查看挂载结果如下:</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-04-35.png\" alt=\"enter description here\" title=\"主机目录的挂载结果\"><br>可以看出,在容器的<code>/notebooks</code>目录下已经出现了<code>tensorflow</code>目录,并且该文件夹下已经出现了在主机目录<code>/home/david/docker/tensorflow</code>里的<code>test.py</code>文件,即目录挂载成功.</p>\n<blockquote>\n<p><strong>注意:使用下面指令可以一步到位!打开ipython notebook并挂载主机目录到容器.</strong><br><code>docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow -p 8888:8888 tensorflow/tensorflow:1.7.0-gpu-py3</code></p>\n</blockquote>\n<p>运行结果:</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-16-54.png\" alt=\"enter description here\" title=\"运行结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018-3-30</p>\n<h4 id=\"1-安装前的准备工作\"><a href=\"#1-安装前的准备工作\" class=\"headerlink\" title=\"1.安装前的准备工作\"></a><strong>1.安装前的准备工作</strong></h4><ol>\n<li>确保是64位的操作系统</li>\n<li>卸载旧版本的docker<br><code>sudo apt-get remove docker docker-engine docker.io</code><br>dockerde相关文件都在<code>/var/lib/docker/</code>路径下</li>\n</ol>\n<h4 id=\"2-使用docker仓库安装\"><a href=\"#2-使用docker仓库安装\" class=\"headerlink\" title=\"2.使用docker仓库安装\"></a><strong>2.使用docker仓库安装</strong></h4><blockquote>\n<p><strong>首次安装docker时需要添加docker的仓库</strong></p>\n</blockquote>\n<ol>\n<li>更新软件源的仓库信息<br><code>sudo apt-get update</code></li>\n<li>安装包来使apt通过HTTPS来使用docker仓库<br><code>sudo apt-get install apt-transport-https ca-certificates \\</code><br><code>curl software-properties-common</code>    </li>\n<li>添加docker的官方GPG证书<br><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg \\</code><br><code>| sudo apt-key add -</code><ol start=\"4\">\n<li>验证是否添加成功带有fingerprint的key<br><code>sudo apt-key fingerprint 0EBFCD88</code></li>\n<li>添加稳定的docker仓库<br><code>sudo add-apt-repository \\</code><br><code>&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\</code><br><code>$(lsb_release -cs) stable&quot;</code><blockquote>\n<p><strong>安装docker-ce</strong></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ol>\n<ol>\n<li>再次更新仓库信息<br><code>sudo apt-get update</code></li>\n<li>指令安装docker<br>注意:<code>sudo apt-get install docker-ce</code>只能安装目前最高的版本,但通常使用下面方法来选择要安装的版本<br><code>apt-cache madison docker-ce</code>查看目前的多个版本,结果如下:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-41-23.png\" alt=\"目前docker-ce的版本\" title=\"目前docker-ce的版本\"><br> 使用<code>sudo apt-get install docker-ce=&lt;VERSION&gt;</code>安装特定的版本,这里使用17.12.0版本,指令为:<code>sudo apt-get install docker-ce=17.12.0~ce-0~ubuntu</code></p>\n<ol start=\"3\">\n<li>验证安装的结果<br>如果安装docker安装正确,则运行<code>sudo docker run hello-world</code>后输出下面结果:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2020-57-04.png\" alt=\"docker安装成功\" title=\"docker安装成功\"></p>\n<ul>\n<li>其他详细的安装详情见官网 <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-ce-1</a></li>\n</ul>\n<h4 id=\"4-创建docker组\"><a href=\"#4-创建docker组\" class=\"headerlink\" title=\"4.创建docker组\"></a><strong>4.创建docker组</strong></h4><blockquote>\n<p>该操作的作用:不用每次使用docker指令时都输入sudo</p>\n<ol>\n<li>创建docker组<br><code>sudo groupadd docker</code>创建docker组<br><code>cat /etc/group | grep -i docker</code>查看docker组的基本情况如下,目前该组中还没有添加用户:</li>\n</ol>\n</blockquote>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-31-44.png\" alt=\"enter description here\" title=\"docker组的信息\"><br>2.为docker组添加用户<br><code>sudo usermod -aG docker $USER</code>,其中<code>$USER</code>表示当前的用户,再次查看docker用户组的信息如下,该组中多了个david用户(当前登录的用户):</p>\n<ol start=\"3\">\n<li>注销登录后,用户组生效,就可以直接使用不带sudo的docker指令</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-30%2021-34-55.png\" alt=\"enter description here\" title=\"david用户加入docker用户组\"></p>\n<h4 id=\"5-安装nvidia-docker来支持GPU\"><a href=\"#5-安装nvidia-docker来支持GPU\" class=\"headerlink\" title=\"5.安装nvidia-docker来支持GPU\"></a><strong>5.安装nvidia-docker来支持GPU</strong></h4><ol>\n<li>卸载旧版本的nvidia-docker及GPU容器<br><code>docker volume ls -q -f driver=nvidia-docker |  \\</code><br><code>xargs -r -I{} -n1 docker ps -q -a -f volume={} | \\</code><br><code>xargs -r docker rm -f</code><br><code>sudo apt-get purge -y nvidia-docker</code></li>\n<li>添加仓库<ul>\n<li>添加key:<br><code>curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \\\nsudo apt-key add -</code></li>\n<li>获取系统版本号:<br><code>distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</code> </li>\n<li>添加仓库:<br><code>curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \\</code><br><code>sudo tee /etc/apt/sources.list.d/nvidia-docker.list</code> </li>\n</ul>\n<ol start=\"3\">\n<li>更新仓库信息<br><code>sudo apt-get update</code></li>\n</ol>\n</li>\n<li><p><strong>安装nvidia-docker2并配置docker dameon加速镜像下载</strong></p>\n<ul>\n<li>安装nvidia的gpu支持:<br><code>sudo apt-get install -y nvidia-docker2</code></li>\n<li>修改<code>/etc/docker/daemon.json</code>文件内容如下:<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"attr\">\"registry-mirrors\"</span>: [<span class=\"string\">\"http://58167a06.m.daocloud.io\"</span>],</span><br><span class=\"line\">  <span class=\"attr\">\"runtimes\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"nvidia\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"path\"</span>: <span class=\"string\">\"/usr/bin/nvidia-container-runtime\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"runtimeArgs\"</span>: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>其中链接部分是使用国内的<strong>加速镜像</strong>,这里使用dalcloud的加速镜像,如果使用阿里云的加速镜像,将链接替换为<a href=\"https://8vntriz8.mirror.aliyuncs.com\" target=\"_blank\" rel=\"noopener\">https://8vntriz8.mirror.aliyuncs.com</a>即可,该链接是在注册阿里开发者平台时生成的,具体的细节见<a href=\"https://www.cnblogs.com/atuotuo/p/6264800.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/atuotuo/p/6264800.html</a>.</p>\n<ul>\n<li>重载daemon使配置生效,并重启docker:<br><code>sudo pkill -SIGHUP dockerd</code><br><code>sudo systemctl daemon-reload</code><br><code>sudo systemctl restart docker</code></li>\n</ul>\n</li>\n<li><p>测试安装情况<br><code>docker run --runtime=nvidia --rm nvidia/cuda nvidia-smi</code>会下载cuda镜像来测试</p>\n</li>\n</ol>\n<h4 id=\"5-使用docker安装tensorflow\"><a href=\"#5-使用docker安装tensorflow\" class=\"headerlink\" title=\"5.使用docker安装tensorflow\"></a><strong>5.使用docker安装tensorflow</strong></h4><ul>\n<li>打开tensorflow的docker<a href=\"https://hub.docker.com/r/tensorflow/tensorflow/tags/\" target=\"_blank\" rel=\"noopener\">镜像仓库</a>如下:</li>\n</ul>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-44-02.png\" alt=\"tensorflow镜像\" title=\"tensorflow的镜像\"><br>使用指令<code>nvidia-docker run -it -p 8888:8888 tensorflow/tensorflow:&lt;mirror tag&gt;</code>下载并运行tag对应的镜像,这里使用tag为1.7.0-gpu-py3的镜像输出结果如下.</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2014-53-50.png\" alt=\"运行tensorflow的镜像\" title=\"运行tensorflow的镜像\"><br>将最下面的链接复制到浏览器就可以打开ipython notebook并使用对应的镜像环境了.</p>\n<ul>\n<li><p>注意:首次运行上面的指令会下载对应tag的镜像,之后运行可以直接从本地读取该镜像.</p>\n</li>\n<li><p>使用<code>docker images</code>查看已下载镜像信息,结果如下:</p>\n</li>\n</ul>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2015-02-54.png\" alt=\"enter description here\" title=\"已下载的镜像信息\"></p>\n<ul>\n<li>使用<code>docker rmi -f &lt;IMAGE ID&gt;</code> 删除对应ID号的镜像.</li>\n</ul>\n<h4 id=\"6-将主机的目录挂载到容器中\"><a href=\"#6-将主机的目录挂载到容器中\" class=\"headerlink\" title=\"6.将主机的目录挂载到容器中\"></a><strong>6.将主机的目录挂载到容器中</strong></h4><ol>\n<li>首先使用<code>docker ps</code>查看目前运行的容器，结果如下，使用<code>docker kill &lt;container ID&gt;</code>关闭ID号对应的容器:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-04-59.png\" alt=\"enter description here\" title=\"查看目前运行的容器\"></p>\n<ol start=\"2\">\n<li>使用<code>docker exec -it 2783ad1bf2dc /bin/bash</code>登录该容器,其中<code>2783ad1bf2dc</code>为第一步的结果中看到的容器ID号,登录的结果如下:</li>\n</ol>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-03-31%2023-16-41.png\" alt=\"enter description here\" title=\"容器的主目录结构\"></p>\n<blockquote>\n<p>登录成功后,终端的用户和工作组组也随着改变,该容器的目录结构与一般的Linux相同,输入<code>exit</code>或使用按键<code>ctrl + d</code>退出登录状态.</p>\n</blockquote>\n<blockquote>\n<p>OPTIONS说明：</p>\n<ul>\n<li>-d :分离模式: 在后台运行</li>\n<li>-i :标准输入,即使没有附加也保持STDIN 打开<ul>\n<li>-t :分配一个伪终端,后面必须加<code>/bin/bash</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ol start=\"3\">\n<li>这里将<code>/home/david/docker/tensorflow</code>目录挂载到1.7.0-gpu-py3容器的<code>/notebooks/tensorflow</code>目录下,将主机的目录挂载到容器后,修改主机的文件,容器中的文件也会同步更新,这样比较方便,操作如下:<br><code>docker run -it -v &lt;主机目录&gt;:&lt;容器挂载目录&gt; &lt;容器镜像&gt; /bin/bash</code>, <code>-v</code>表示挂载目录的选项;<strong>冒号</strong>前面是主机目录,后面是容器目录;最后面接容器镜像</li>\n</ol>\n<blockquote>\n<p>这里的挂载目录操作:<br><code>docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow tensorflow/tensorflow:1.7.0-gpu-py3 /bin/bash</code></p>\n</blockquote>\n<p>查看挂载结果如下:</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-04-35.png\" alt=\"enter description here\" title=\"主机目录的挂载结果\"><br>可以看出,在容器的<code>/notebooks</code>目录下已经出现了<code>tensorflow</code>目录,并且该文件夹下已经出现了在主机目录<code>/home/david/docker/tensorflow</code>里的<code>test.py</code>文件,即目录挂载成功.</p>\n<blockquote>\n<p><strong>注意:使用下面指令可以一步到位!打开ipython notebook并挂载主机目录到容器.</strong><br><code>docker run -it -v /home/david/docker/tensorflow:/notebooks/tensorflow -p 8888:8888 tensorflow/tensorflow:1.7.0-gpu-py3</code></p>\n</blockquote>\n<p>运行结果:</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/Screenshot%20from%202018-04-01%2000-16-54.png\" alt=\"enter description here\" title=\"运行结果\"></p>\n"},{"title":"C++学习笔记","comments":1,"sitemap":false,"grammar_cjkRuby":true,"_content":"2018-2-3\n\n\n### **1. C++的头文件和源文件**\n`.h`头文件只需预处理，`.cpp`才需要编译，一般在头文件里声明一个类及类的的方法，在源文件里实现函数的**定义**与**实现**，这样可以将声明和定义分开，利于构建大规模的程序。\n`hello.h`文件如下：\n```cpp\n#pragma once       //预编译一次，防止出现重复包含头文件的情况\n#include \"iostream\"\n#include \"string\"\nusing namespace std;\n\nclass Hello\n{\npublic:                   //共有函数及成员定义的关键词\n\tHello();             //声明构造函数，构造函数最好不要有默认参数\n\t~Hello();            //声明析构函数\n\tvoid talk(int number=0);    //声明共有成员函数,参数给出默认值  \n\nprivate:            //私有函数及成员定义的关键词\n\tstring content; //声明一个字符串变量\n\tint num;\n};\n```\n`hello.cpp`文件如下：\n```cpp\n#include \"hello.h\"\n\n//类的定义与实现\nHello::Hello()      //构造函数定义\n{\n\tcontent = \"这是私有成员变量\";      //在构造函数中为成员变量赋值\n\tcout << \"这是构造函数\" << endl;\n\n}\nHello::~Hello()       //析构函数定义\n{\n\tcout << \"这是析构函数\" << endl;\n}\nvoid Hello::talk(int number)    //成员函数定义\n{\n\tnum = number;\n\tcout <<\"content:\"<< content << endl;  //头文件中包含了string才能使用该句\n\tcout << \"num:\" << num << endl;\n}\n```\n主函数main.cpp如下：\n```cpp\n#include \"iostream\"\n#include \"hello.h\"\nusing namespace std;\n\nint main()\n{\n\tHello robot;      //实例化一个对象\n\trobot.talk(233);  //调用成员函数，默认参数为0\n\treturn 0;\n}\n```\n运行结果如下：\n\n![enter description here][1]\n\n\n### **2. C++中的L和_T的作用**\n在一个字符串前加 `L`表示将ANSI字符串转换为unicode的字符串，每个字符占两个字节\n```cpp\nstrlen(\"abc\") = 3;\nstrlen(L\"asd\") = 6;\n```\n _T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式，如果你定义了UNICODE，那么_T宏会把字符串前面加一个L。这时 _T(\"ABCD\") 相当于 L\"ABCD\" ，这是宽字符串。如果没有定义，那么_T宏不会在字符串前面加那个L，_T(\"ABCD\") 就等价于 \"ABCD\"  \n \n ### **3. C++调用Python函数的方法**\n 这里使用vs2015编译程序，首先要设置项目的属性，把python的include目录和libs目录包含到项目中，设置如下：\n \n ![enter description here][2]\n \n\n python程序如下：\n ```python\n # python\ndef convertStrToNum(string):\n\tresult = eval(string)\n\treturn result\n ```\n 这里的python程序当做模块来对待，文件夹名称为strToNum，文件名strToNum.py，在同一个文件夹下有__init__.py文件(内容可为空)来表示模块。\n \n 在`C++`程序中调用python函数时注意：python语句写成模块的形式；将python模块的路径添加到系统中，否则c++程序无法找到python模块，最好使用相对路径；\n \n 步骤：\n 1.`Py_Initialize()`初始化python;\n 2.定义PyObject相关指针，\n   - 载入python模块\n   - 加载模块函数\n   - 添加参数列表\n   - 调用python函数\n   - 定义C++数据变量，转换python返回的参数为`C++`的数据类型，并用该变量接收\n\n\n\n3.`Py_Finalize()`释放资源\n\n\n \n \n c++程序如下\n ```cpp\n #include \"iostream\"\n#include \"Python.h\"\n#include \"string\"\n#include \"cstring\"\nusing namespace std;\n\nint main()\n{\n\tPy_Initialize();\n\t//PyRun_SimpleString(\"x=eval('2 + 3*2')\");    //运行单个python语句\n\t//PyRun_SimpleString(\"print(x)\");\n\t//PyArg_Parse(x, \"i\");\n\n\t// 将Python工作路径切换到待调用模块所在目录，一定要保证路径名的正确性\n\tstring path = \".\\\\strToNum\";                  //相对路径，windows下\n\tstring chdir_cmd = string(\"sys.path.append(\\\"\") + path + \"\\\")\";\n\tconst char* cstr_cmd = chdir_cmd.c_str();\n\tPyRun_SimpleString(\"import sys\");\n\tPyRun_SimpleString(cstr_cmd);\n\tPyRun_SimpleString(\"import os\");\n\tPyRun_SimpleString(\"print(os.getcwd())\");    //获取当前路径\n\tPyRun_SimpleString(\"print(sys.path)\");\n\t\n\tPyObject *pModule = NULL;       //接收python模块\n\tPyObject *pFunc = NULL;         //接收pyhton函数\n\tPyObject *pResult = NULL;       //接收python函数的返回结果\n\tdouble result = 0;              //C++中接收最终计算结果的变量\n\n\tpModule = PyImport_ImportModule(\"strToNum\");\n\tif (!pModule) // 加载模块失败\n\t{\n\t\tcout << \"[ERROR] Python get module failed.\" << endl;\n\t\treturn 0;\n\t}\n\tcout << \"[INFO] Python get module succeed.\" << endl;\n\n\tpFunc = PyObject_GetAttrString(pModule, \"convertStrToNum\");\n\tif (!pFunc || !PyCallable_Check(pFunc))  // 验证是否加载成功\n\t{\n\t\tcout << \"[ERROR] Can't find funftion (convertStrToNum)\" << endl;\n\t\treturn 0;\n\t}\n\t\n\tcout << \"[INFO] Get function (convertStrToNum) succeed.\" << endl;\n\n\tPyObject *pArgs = PyTuple_New(1);         //新建数组保存传入python函数的参数\n\tPyTuple_SetItem(pArgs, 0, Py_BuildValue(\"s\", \"1 + 2*4.3 -1\"));\n\t//PyObject *pArgs = Py_BuildValue(\"23\");\n\tpResult = PyEval_CallObject(pFunc, pArgs);  //调用python函数\n\tPyArg_Parse(pResult, \"d\", &result);         //python函数的返回结果转换为double\n\tcout << \"result:\" << result << endl;\n\n\tPy_Finalize();      //释放资源\n\treturn 0;\n}\n ```\n 参考的文章：\n [`C++`调用python返回值][4]\n [调用python的类函数][5]\n [使用与pyhton的`C++`扩展][6]\n \n \n \n \n \n \n \n \n \n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/result.jpg \"运行结果\"\n  [2]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/c++%E8%B0%83%E7%94%A8python_3.jpg \"项目的属性设置\"\n  [4]: http://blog.csdn.net/itbuluoge/article/details/13005369\n  [5]: http://blog.csdn.net/nynyvkhhiiii/article/details/17525865\n  [6]: https://docs.microsoft.com/zh-cn/visualstudio/python/working-with-c-cpp-python-in-visual-studio","source":"_posts/C++学习笔记.md","raw":"---\ntitle: C++学习笔记 \ntags: \n - C++\n - C++调用Python\ncategories:\n- C++\ncomments: true\nsitemap: false\ngrammar_cjkRuby: true\n---\n2018-2-3\n\n\n### **1. C++的头文件和源文件**\n`.h`头文件只需预处理，`.cpp`才需要编译，一般在头文件里声明一个类及类的的方法，在源文件里实现函数的**定义**与**实现**，这样可以将声明和定义分开，利于构建大规模的程序。\n`hello.h`文件如下：\n```cpp\n#pragma once       //预编译一次，防止出现重复包含头文件的情况\n#include \"iostream\"\n#include \"string\"\nusing namespace std;\n\nclass Hello\n{\npublic:                   //共有函数及成员定义的关键词\n\tHello();             //声明构造函数，构造函数最好不要有默认参数\n\t~Hello();            //声明析构函数\n\tvoid talk(int number=0);    //声明共有成员函数,参数给出默认值  \n\nprivate:            //私有函数及成员定义的关键词\n\tstring content; //声明一个字符串变量\n\tint num;\n};\n```\n`hello.cpp`文件如下：\n```cpp\n#include \"hello.h\"\n\n//类的定义与实现\nHello::Hello()      //构造函数定义\n{\n\tcontent = \"这是私有成员变量\";      //在构造函数中为成员变量赋值\n\tcout << \"这是构造函数\" << endl;\n\n}\nHello::~Hello()       //析构函数定义\n{\n\tcout << \"这是析构函数\" << endl;\n}\nvoid Hello::talk(int number)    //成员函数定义\n{\n\tnum = number;\n\tcout <<\"content:\"<< content << endl;  //头文件中包含了string才能使用该句\n\tcout << \"num:\" << num << endl;\n}\n```\n主函数main.cpp如下：\n```cpp\n#include \"iostream\"\n#include \"hello.h\"\nusing namespace std;\n\nint main()\n{\n\tHello robot;      //实例化一个对象\n\trobot.talk(233);  //调用成员函数，默认参数为0\n\treturn 0;\n}\n```\n运行结果如下：\n\n![enter description here][1]\n\n\n### **2. C++中的L和_T的作用**\n在一个字符串前加 `L`表示将ANSI字符串转换为unicode的字符串，每个字符占两个字节\n```cpp\nstrlen(\"abc\") = 3;\nstrlen(L\"asd\") = 6;\n```\n _T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式，如果你定义了UNICODE，那么_T宏会把字符串前面加一个L。这时 _T(\"ABCD\") 相当于 L\"ABCD\" ，这是宽字符串。如果没有定义，那么_T宏不会在字符串前面加那个L，_T(\"ABCD\") 就等价于 \"ABCD\"  \n \n ### **3. C++调用Python函数的方法**\n 这里使用vs2015编译程序，首先要设置项目的属性，把python的include目录和libs目录包含到项目中，设置如下：\n \n ![enter description here][2]\n \n\n python程序如下：\n ```python\n # python\ndef convertStrToNum(string):\n\tresult = eval(string)\n\treturn result\n ```\n 这里的python程序当做模块来对待，文件夹名称为strToNum，文件名strToNum.py，在同一个文件夹下有__init__.py文件(内容可为空)来表示模块。\n \n 在`C++`程序中调用python函数时注意：python语句写成模块的形式；将python模块的路径添加到系统中，否则c++程序无法找到python模块，最好使用相对路径；\n \n 步骤：\n 1.`Py_Initialize()`初始化python;\n 2.定义PyObject相关指针，\n   - 载入python模块\n   - 加载模块函数\n   - 添加参数列表\n   - 调用python函数\n   - 定义C++数据变量，转换python返回的参数为`C++`的数据类型，并用该变量接收\n\n\n\n3.`Py_Finalize()`释放资源\n\n\n \n \n c++程序如下\n ```cpp\n #include \"iostream\"\n#include \"Python.h\"\n#include \"string\"\n#include \"cstring\"\nusing namespace std;\n\nint main()\n{\n\tPy_Initialize();\n\t//PyRun_SimpleString(\"x=eval('2 + 3*2')\");    //运行单个python语句\n\t//PyRun_SimpleString(\"print(x)\");\n\t//PyArg_Parse(x, \"i\");\n\n\t// 将Python工作路径切换到待调用模块所在目录，一定要保证路径名的正确性\n\tstring path = \".\\\\strToNum\";                  //相对路径，windows下\n\tstring chdir_cmd = string(\"sys.path.append(\\\"\") + path + \"\\\")\";\n\tconst char* cstr_cmd = chdir_cmd.c_str();\n\tPyRun_SimpleString(\"import sys\");\n\tPyRun_SimpleString(cstr_cmd);\n\tPyRun_SimpleString(\"import os\");\n\tPyRun_SimpleString(\"print(os.getcwd())\");    //获取当前路径\n\tPyRun_SimpleString(\"print(sys.path)\");\n\t\n\tPyObject *pModule = NULL;       //接收python模块\n\tPyObject *pFunc = NULL;         //接收pyhton函数\n\tPyObject *pResult = NULL;       //接收python函数的返回结果\n\tdouble result = 0;              //C++中接收最终计算结果的变量\n\n\tpModule = PyImport_ImportModule(\"strToNum\");\n\tif (!pModule) // 加载模块失败\n\t{\n\t\tcout << \"[ERROR] Python get module failed.\" << endl;\n\t\treturn 0;\n\t}\n\tcout << \"[INFO] Python get module succeed.\" << endl;\n\n\tpFunc = PyObject_GetAttrString(pModule, \"convertStrToNum\");\n\tif (!pFunc || !PyCallable_Check(pFunc))  // 验证是否加载成功\n\t{\n\t\tcout << \"[ERROR] Can't find funftion (convertStrToNum)\" << endl;\n\t\treturn 0;\n\t}\n\t\n\tcout << \"[INFO] Get function (convertStrToNum) succeed.\" << endl;\n\n\tPyObject *pArgs = PyTuple_New(1);         //新建数组保存传入python函数的参数\n\tPyTuple_SetItem(pArgs, 0, Py_BuildValue(\"s\", \"1 + 2*4.3 -1\"));\n\t//PyObject *pArgs = Py_BuildValue(\"23\");\n\tpResult = PyEval_CallObject(pFunc, pArgs);  //调用python函数\n\tPyArg_Parse(pResult, \"d\", &result);         //python函数的返回结果转换为double\n\tcout << \"result:\" << result << endl;\n\n\tPy_Finalize();      //释放资源\n\treturn 0;\n}\n ```\n 参考的文章：\n [`C++`调用python返回值][4]\n [调用python的类函数][5]\n [使用与pyhton的`C++`扩展][6]\n \n \n \n \n \n \n \n \n \n\n\n  [1]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/result.jpg \"运行结果\"\n  [2]: http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/c++%E8%B0%83%E7%94%A8python_3.jpg \"项目的属性设置\"\n  [4]: http://blog.csdn.net/itbuluoge/article/details/13005369\n  [5]: http://blog.csdn.net/nynyvkhhiiii/article/details/17525865\n  [6]: https://docs.microsoft.com/zh-cn/visualstudio/python/working-with-c-cpp-python-in-visual-studio","slug":"C++学习笔记","published":1,"date":"2018-04-21T06:33:57.761Z","updated":"2018-04-21T15:35:18.626Z","layout":"post","photos":[],"link":"","_id":"cjgmb0njt0006qcve3gd1j6mt","content":"<p>2018-2-3</p>\n<h3 id=\"1-C-的头文件和源文件\"><a href=\"#1-C-的头文件和源文件\" class=\"headerlink\" title=\"1. C++的头文件和源文件\"></a><strong>1. C++的头文件和源文件</strong></h3><p><code>.h</code>头文件只需预处理，<code>.cpp</code>才需要编译，一般在头文件里声明一个类及类的的方法，在源文件里实现函数的<strong>定义</strong>与<strong>实现</strong>，这样可以将声明和定义分开，利于构建大规模的程序。<br><code>hello.h</code>文件如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once       <span class=\"comment\">//预编译一次，防止出现重复包含头文件的情况</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:                   <span class=\"comment\">//共有函数及成员定义的关键词</span></span><br><span class=\"line\">\tHello();             <span class=\"comment\">//声明构造函数，构造函数最好不要有默认参数</span></span><br><span class=\"line\">\t~Hello();            <span class=\"comment\">//声明析构函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">talk</span><span class=\"params\">(<span class=\"keyword\">int</span> number=<span class=\"number\">0</span>)</span></span>;    <span class=\"comment\">//声明共有成员函数,参数给出默认值  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:            <span class=\"comment\">//私有函数及成员定义的关键词</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> content; <span class=\"comment\">//声明一个字符串变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><code>hello.cpp</code>文件如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类的定义与实现</span></span><br><span class=\"line\">Hello::Hello()      <span class=\"comment\">//构造函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcontent = <span class=\"string\">\"这是私有成员变量\"</span>;      <span class=\"comment\">//在构造函数中为成员变量赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是构造函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hello::~Hello()       <span class=\"comment\">//析构函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是析构函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Hello::talk(<span class=\"keyword\">int</span> number)    <span class=\"comment\">//成员函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tnum = number;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"content:\"</span>&lt;&lt; content &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//头文件中包含了string才能使用该句</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num:\"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主函数main.cpp如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHello robot;      <span class=\"comment\">//实例化一个对象</span></span><br><span class=\"line\">\trobot.talk(<span class=\"number\">233</span>);  <span class=\"comment\">//调用成员函数，默认参数为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/result.jpg\" alt=\"enter description here\" title=\"运行结果\"></p>\n<h3 id=\"2-C-中的L和-T的作用\"><a href=\"#2-C-中的L和-T的作用\" class=\"headerlink\" title=\"2. C++中的L和_T的作用\"></a><strong>2. C++中的L和_T的作用</strong></h3><p>在一个字符串前加 <code>L</code>表示将ANSI字符串转换为unicode的字符串，每个字符占两个字节<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strlen</span>(<span class=\"string\">\"abc\"</span>) = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>(<span class=\"string\">L\"asd\"</span>) = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure></p>\n<p> _T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式，如果你定义了UNICODE，那么_T宏会把字符串前面加一个L。这时 _T(“ABCD”) 相当于 L”ABCD” ，这是宽字符串。如果没有定义，那么_T宏不会在字符串前面加那个L，_T(“ABCD”) 就等价于 “ABCD”  </p>\n<h3 id=\"3-C-调用Python函数的方法\"><a href=\"#3-C-调用Python函数的方法\" class=\"headerlink\" title=\"3. C++调用Python函数的方法\"></a><strong>3. C++调用Python函数的方法</strong></h3><p> 这里使用vs2015编译程序，首先要设置项目的属性，把python的include目录和libs目录包含到项目中，设置如下：</p>\n<p> <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/c++%E8%B0%83%E7%94%A8python_3.jpg\" alt=\"enter description here\" title=\"项目的属性设置\"></p>\n<p> python程序如下：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># python</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertStrToNum</span><span class=\"params\">(string)</span>:</span></span><br><span class=\"line\">\tresult = eval(string)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure></p>\n<p> 这里的python程序当做模块来对待，文件夹名称为strToNum，文件名strToNum.py，在同一个文件夹下有<strong>init</strong>.py文件(内容可为空)来表示模块。</p>\n<p> 在<code>C++</code>程序中调用python函数时注意：python语句写成模块的形式；将python模块的路径添加到系统中，否则c++程序无法找到python模块，最好使用相对路径；</p>\n<p> 步骤：<br> 1.<code>Py_Initialize()</code>初始化python;<br> 2.定义PyObject相关指针，</p>\n<ul>\n<li>载入python模块</li>\n<li>加载模块函数</li>\n<li>添加参数列表</li>\n<li>调用python函数</li>\n<li>定义C++数据变量，转换python返回的参数为<code>C++</code>的数据类型，并用该变量接收</li>\n</ul>\n<p>3.<code>Py_Finalize()</code>释放资源</p>\n<p> c++程序如下<br> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Python.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstring\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPy_Initialize();</span><br><span class=\"line\">\t<span class=\"comment\">//PyRun_SimpleString(\"x=eval('2 + 3*2')\");    //运行单个python语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//PyRun_SimpleString(\"print(x)\");</span></span><br><span class=\"line\">\t<span class=\"comment\">//PyArg_Parse(x, \"i\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Python工作路径切换到待调用模块所在目录，一定要保证路径名的正确性</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> path = <span class=\"string\">\".\\\\strToNum\"</span>;                  <span class=\"comment\">//相对路径，windows下</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> chdir_cmd = <span class=\"built_in\">string</span>(<span class=\"string\">\"sys.path.append(\\\"\"</span>) + path + <span class=\"string\">\"\\\")\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cstr_cmd = chdir_cmd.c_str();</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"import sys\"</span>);</span><br><span class=\"line\">\tPyRun_SimpleString(cstr_cmd);</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"import os\"</span>);</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"print(os.getcwd())\"</span>);    <span class=\"comment\">//获取当前路径</span></span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"print(sys.path)\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPyObject *pModule = <span class=\"literal\">NULL</span>;       <span class=\"comment\">//接收python模块</span></span><br><span class=\"line\">\tPyObject *pFunc = <span class=\"literal\">NULL</span>;         <span class=\"comment\">//接收pyhton函数</span></span><br><span class=\"line\">\tPyObject *pResult = <span class=\"literal\">NULL</span>;       <span class=\"comment\">//接收python函数的返回结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> result = <span class=\"number\">0</span>;              <span class=\"comment\">//C++中接收最终计算结果的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpModule = PyImport_ImportModule(<span class=\"string\">\"strToNum\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pModule) <span class=\"comment\">// 加载模块失败</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[ERROR] Python get module failed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[INFO] Python get module succeed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpFunc = PyObject_GetAttrString(pModule, <span class=\"string\">\"convertStrToNum\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pFunc || !PyCallable_Check(pFunc))  <span class=\"comment\">// 验证是否加载成功</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[ERROR] Can't find funftion (convertStrToNum)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[INFO] Get function (convertStrToNum) succeed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPyObject *pArgs = PyTuple_New(<span class=\"number\">1</span>);         <span class=\"comment\">//新建数组保存传入python函数的参数</span></span><br><span class=\"line\">\tPyTuple_SetItem(pArgs, <span class=\"number\">0</span>, Py_BuildValue(<span class=\"string\">\"s\"</span>, <span class=\"string\">\"1 + 2*4.3 -1\"</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//PyObject *pArgs = Py_BuildValue(\"23\");</span></span><br><span class=\"line\">\tpResult = PyEval_CallObject(pFunc, pArgs);  <span class=\"comment\">//调用python函数</span></span><br><span class=\"line\">\tPyArg_Parse(pResult, <span class=\"string\">\"d\"</span>, &amp;result);         <span class=\"comment\">//python函数的返回结果转换为double</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"result:\"</span> &lt;&lt; result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPy_Finalize();      <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 参考的文章：<br> <a href=\"http://blog.csdn.net/itbuluoge/article/details/13005369\" target=\"_blank\" rel=\"noopener\"><code>C++</code>调用python返回值</a><br> <a href=\"http://blog.csdn.net/nynyvkhhiiii/article/details/17525865\" target=\"_blank\" rel=\"noopener\">调用python的类函数</a><br> <a href=\"https://docs.microsoft.com/zh-cn/visualstudio/python/working-with-c-cpp-python-in-visual-studio\" target=\"_blank\" rel=\"noopener\">使用与pyhton的<code>C++</code>扩展</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018-2-3</p>\n<h3 id=\"1-C-的头文件和源文件\"><a href=\"#1-C-的头文件和源文件\" class=\"headerlink\" title=\"1. C++的头文件和源文件\"></a><strong>1. C++的头文件和源文件</strong></h3><p><code>.h</code>头文件只需预处理，<code>.cpp</code>才需要编译，一般在头文件里声明一个类及类的的方法，在源文件里实现函数的<strong>定义</strong>与<strong>实现</strong>，这样可以将声明和定义分开，利于构建大规模的程序。<br><code>hello.h</code>文件如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> once       <span class=\"comment\">//预编译一次，防止出现重复包含头文件的情况</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hello</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:                   <span class=\"comment\">//共有函数及成员定义的关键词</span></span><br><span class=\"line\">\tHello();             <span class=\"comment\">//声明构造函数，构造函数最好不要有默认参数</span></span><br><span class=\"line\">\t~Hello();            <span class=\"comment\">//声明析构函数</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">talk</span><span class=\"params\">(<span class=\"keyword\">int</span> number=<span class=\"number\">0</span>)</span></span>;    <span class=\"comment\">//声明共有成员函数,参数给出默认值  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:            <span class=\"comment\">//私有函数及成员定义的关键词</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> content; <span class=\"comment\">//声明一个字符串变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><code>hello.cpp</code>文件如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//类的定义与实现</span></span><br><span class=\"line\">Hello::Hello()      <span class=\"comment\">//构造函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcontent = <span class=\"string\">\"这是私有成员变量\"</span>;      <span class=\"comment\">//在构造函数中为成员变量赋值</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是构造函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Hello::~Hello()       <span class=\"comment\">//析构函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"这是析构函数\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">void</span> Hello::talk(<span class=\"keyword\">int</span> number)    <span class=\"comment\">//成员函数定义</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tnum = number;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"content:\"</span>&lt;&lt; content &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">//头文件中包含了string才能使用该句</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"num:\"</span> &lt;&lt; num &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>主函数main.cpp如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"hello.h\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tHello robot;      <span class=\"comment\">//实例化一个对象</span></span><br><span class=\"line\">\trobot.talk(<span class=\"number\">233</span>);  <span class=\"comment\">//调用成员函数，默认参数为0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果如下：</p>\n<p><img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/result.jpg\" alt=\"enter description here\" title=\"运行结果\"></p>\n<h3 id=\"2-C-中的L和-T的作用\"><a href=\"#2-C-中的L和-T的作用\" class=\"headerlink\" title=\"2. C++中的L和_T的作用\"></a><strong>2. C++中的L和_T的作用</strong></h3><p>在一个字符串前加 <code>L</code>表示将ANSI字符串转换为unicode的字符串，每个字符占两个字节<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strlen</span>(<span class=\"string\">\"abc\"</span>) = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"built_in\">strlen</span>(<span class=\"string\">L\"asd\"</span>) = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure></p>\n<p> _T宏可以把一个引号引起来的字符串，根据你的环境设置，使得编译器会根据编译目标环境选择合适的（Unicode还是ANSI）字符处理方式，如果你定义了UNICODE，那么_T宏会把字符串前面加一个L。这时 _T(“ABCD”) 相当于 L”ABCD” ，这是宽字符串。如果没有定义，那么_T宏不会在字符串前面加那个L，_T(“ABCD”) 就等价于 “ABCD”  </p>\n<h3 id=\"3-C-调用Python函数的方法\"><a href=\"#3-C-调用Python函数的方法\" class=\"headerlink\" title=\"3. C++调用Python函数的方法\"></a><strong>3. C++调用Python函数的方法</strong></h3><p> 这里使用vs2015编译程序，首先要设置项目的属性，把python的include目录和libs目录包含到项目中，设置如下：</p>\n<p> <img src=\"http://p7jji9nvf.bkt.clouddn.com/%E5%B0%8F%E4%B9%A6%E5%8C%A0/c++%E8%B0%83%E7%94%A8python_3.jpg\" alt=\"enter description here\" title=\"项目的属性设置\"></p>\n<p> python程序如下：<br> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># python</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertStrToNum</span><span class=\"params\">(string)</span>:</span></span><br><span class=\"line\">\tresult = eval(string)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure></p>\n<p> 这里的python程序当做模块来对待，文件夹名称为strToNum，文件名strToNum.py，在同一个文件夹下有<strong>init</strong>.py文件(内容可为空)来表示模块。</p>\n<p> 在<code>C++</code>程序中调用python函数时注意：python语句写成模块的形式；将python模块的路径添加到系统中，否则c++程序无法找到python模块，最好使用相对路径；</p>\n<p> 步骤：<br> 1.<code>Py_Initialize()</code>初始化python;<br> 2.定义PyObject相关指针，</p>\n<ul>\n<li>载入python模块</li>\n<li>加载模块函数</li>\n<li>添加参数列表</li>\n<li>调用python函数</li>\n<li>定义C++数据变量，转换python返回的参数为<code>C++</code>的数据类型，并用该变量接收</li>\n</ul>\n<p>3.<code>Py_Finalize()</code>释放资源</p>\n<p> c++程序如下<br> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"Python.h\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"string\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"cstring\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPy_Initialize();</span><br><span class=\"line\">\t<span class=\"comment\">//PyRun_SimpleString(\"x=eval('2 + 3*2')\");    //运行单个python语句</span></span><br><span class=\"line\">\t<span class=\"comment\">//PyRun_SimpleString(\"print(x)\");</span></span><br><span class=\"line\">\t<span class=\"comment\">//PyArg_Parse(x, \"i\");</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 将Python工作路径切换到待调用模块所在目录，一定要保证路径名的正确性</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> path = <span class=\"string\">\".\\\\strToNum\"</span>;                  <span class=\"comment\">//相对路径，windows下</span></span><br><span class=\"line\">\t<span class=\"built_in\">string</span> chdir_cmd = <span class=\"built_in\">string</span>(<span class=\"string\">\"sys.path.append(\\\"\"</span>) + path + <span class=\"string\">\"\\\")\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* cstr_cmd = chdir_cmd.c_str();</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"import sys\"</span>);</span><br><span class=\"line\">\tPyRun_SimpleString(cstr_cmd);</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"import os\"</span>);</span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"print(os.getcwd())\"</span>);    <span class=\"comment\">//获取当前路径</span></span><br><span class=\"line\">\tPyRun_SimpleString(<span class=\"string\">\"print(sys.path)\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPyObject *pModule = <span class=\"literal\">NULL</span>;       <span class=\"comment\">//接收python模块</span></span><br><span class=\"line\">\tPyObject *pFunc = <span class=\"literal\">NULL</span>;         <span class=\"comment\">//接收pyhton函数</span></span><br><span class=\"line\">\tPyObject *pResult = <span class=\"literal\">NULL</span>;       <span class=\"comment\">//接收python函数的返回结果</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> result = <span class=\"number\">0</span>;              <span class=\"comment\">//C++中接收最终计算结果的变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpModule = PyImport_ImportModule(<span class=\"string\">\"strToNum\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pModule) <span class=\"comment\">// 加载模块失败</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[ERROR] Python get module failed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[INFO] Python get module succeed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpFunc = PyObject_GetAttrString(pModule, <span class=\"string\">\"convertStrToNum\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pFunc || !PyCallable_Check(pFunc))  <span class=\"comment\">// 验证是否加载成功</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[ERROR] Can't find funftion (convertStrToNum)\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"[INFO] Get function (convertStrToNum) succeed.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPyObject *pArgs = PyTuple_New(<span class=\"number\">1</span>);         <span class=\"comment\">//新建数组保存传入python函数的参数</span></span><br><span class=\"line\">\tPyTuple_SetItem(pArgs, <span class=\"number\">0</span>, Py_BuildValue(<span class=\"string\">\"s\"</span>, <span class=\"string\">\"1 + 2*4.3 -1\"</span>));</span><br><span class=\"line\">\t<span class=\"comment\">//PyObject *pArgs = Py_BuildValue(\"23\");</span></span><br><span class=\"line\">\tpResult = PyEval_CallObject(pFunc, pArgs);  <span class=\"comment\">//调用python函数</span></span><br><span class=\"line\">\tPyArg_Parse(pResult, <span class=\"string\">\"d\"</span>, &amp;result);         <span class=\"comment\">//python函数的返回结果转换为double</span></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"result:\"</span> &lt;&lt; result &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPy_Finalize();      <span class=\"comment\">//释放资源</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> 参考的文章：<br> <a href=\"http://blog.csdn.net/itbuluoge/article/details/13005369\" target=\"_blank\" rel=\"noopener\"><code>C++</code>调用python返回值</a><br> <a href=\"http://blog.csdn.net/nynyvkhhiiii/article/details/17525865\" target=\"_blank\" rel=\"noopener\">调用python的类函数</a><br> <a href=\"https://docs.microsoft.com/zh-cn/visualstudio/python/working-with-c-cpp-python-in-visual-studio\" target=\"_blank\" rel=\"noopener\">使用与pyhton的<code>C++</code>扩展</a></p>\n"},{"title":"linux系统安装及软件配置","comments":1,"sitemap":false,"grammar_cjkRuby":true,"_content":"2017-11-29\n\n###  **1.安装ubunut系统时一直卡在图标的位置无法进入安装界面**\n将系统bios里security boot设置为disable，重启后再重新进入安装状态；\n 如果仍然无法进入安装状态：在选择安装和试用的界面，将光标移动到ubunt上，按 ‘e’，系统进入一个设置界面，在`quiet splash`后面加 `nomodeset`(别忘了空格)，然后按F10后系统以不设置显示模式的状态可以进入安装界面，但此时分辨率较低，尤其在选择分区后无法直接点击“安装”按钮，而且无法点击菜单栏拖动，此时使用**alt + 鼠标左键**可以拖动窗口，然后按步骤安装系统即可。\n \n ### **2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统**\n 可能和电脑的intel核显卡和nvidia集成显卡的驱动有关，此时再以上面的nomodeset模式进入系统，使用指令`sudo apt-get install nvidia-current`，然后重启可以成功进入系统。\n       如果没有进入系统又卡在黑屏界面，则使用另一种方法：\n      1使用nomodeset模式进入系统，先安装Intel的核心显卡驱动，去官网下载update-tool工具，这是我下载的版本`intel-graphics-update-tool_2.0.2_amd64.deb`，然后安装即可。\n    ` sudo dpkg -i intel-graphics-update-tool_2.0.2_amd64.deb `\n    ` sudo apt-get -f install`\n    ` sudo apt-get update`\n安装完成后使用`glxinfo | grep rendering`可以查看安装的结果，显示yes表示安装成功\n      2安装nvidia的显卡驱动\n     ` lspci | grep -i nvidia`查看电脑是否支持英伟达显卡，安装官网安装驱动\n      a关闭图像界面和禁用nouveau\n         进入字符界面`ctrl + alt + f1`后登录，`sudo serivce lightdm stop`关闭图像界面服务，禁用nouveau第三方驱动(步骤略)，`lsmod | nouveau`无输出则禁用成功\n      b 安装nvidia的deb文件即可\n     安装完成后使用`cat /proc/driver/nvidia/version`查看驱动版本，使用`nvidia-smi`也可以查看驱动及显卡的硬件信息\n 所有的驱动安装完成后，重启进入系统，如果还没有进入系统，则按上述的办法重安nvidia驱动，使用`sudo apt-get remove nvidia`和`sudo /usr/bin/nvidia-uninstall`将驱动卸载干净再重新安装。\n ### **3.配置sublime + python3的运行环境**\n #### 3.1 首先在ubuntu16.04下安装sublime text3\n > sudo add-apt-repository ppa:webupd8team/sublime-text-3 添加apt的安装包来源\n > sudo apt-get update 更新软件源\n > sudo apt-get install sublime-text-installer 安装sublime text\n \n 安装完成后输入`subl 文件名`，如果该⽂件存在就会以sublime text打开， 否则就创建该⽂件， 默认的有代码\n提⽰和⾼亮功能， 选择运⾏的环境后， Ctrl + B 可以编译运⾏编写的代码\n\nPPA 全称为 Personal Package Archives（个⼈软件包档案） ,通常 PPA 源⾥的软件是官⽅源⾥没有的， 或\n者是最新版本的软件。 相对于通过 Deb 包安装来说， 使⽤ PPA 的好处是， ⼀旦软件有更新， 通过` sudo\napt-get upgrade` 这样命令就可以直接升级到新版本。\n在 Ubuntu Karmic (9.10) 我们可以使⽤ `add-apt-repository` 脚本添加 ppa 到当前的库中并且⾃动导⼊\n公钥。 在终端下使⽤语法： `add-apt-repository ppa:<ppa_name>`\n \n #### 3.2 配置python3环境\n A   新建运行环境使用Tools==>Build System==>New Build Systems生成一个配置文件，我们可以改   名字为python3.sublime-build，python3就成为了build system中的一个选项了，在该文件中写入：\n ```bash\n{\n\"shell_cmd\": \"python3 -u \\\"$file\\\"\",\n\n\"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n\n\"selector\": \"source.python\",\n}\n```\n保存后在build system中选择python3，使用`ctrl + B就`可以运行代码了\n```\nimport sys\nprint(sys.version)\nprint(sys.version_info)\n```\n上面的代码可以输出使用的python版本，python2版本可以直接选择Tools==>build system中的python就行，应为在系统中默认的是python2，所以这里要构建python3的运行环境。\nB  在sublime中加入anaconda的插件，特别好使\n先安装package control，然后安装anaconda的插件，点击Preferences==>Package Settings==>Anaconda==>Settings User生成文件Anaconda.sublime-settings，里面写入下面代码：\n```\n{\n\n\"anaconda_linting\": false,\n\n//保存文件后自动pep8格式化\n\n\"auto_formatting\": true,\n\n\"enable_signatures_tooltip\": false,\n// close the document in the function or packages\n\n\"python_interpreter\": \"/usr/bin/python3\"\n\n}\n```\n配置后，函数可以补全，可以查看定义等\n\n#### 3.3 解决sublime无法输入中文问题\n`sudo apt-get update && sudo apt-get upgrade`  克隆项目到本地 \n\n`git clone https://github.com/lyfeyaj/sublime-text-imfix.git `  运行脚本 \n`cd sublime-text-imfix && ./sublime-imfix`\n \n最后重启即可\n如果上述方法不可行，则：\n 1将sublime-test-imfix/lib路径下的libsublime-imfix.so拷贝到sublime的文件夹下\n 2 将sublime-test-imfix/src路径下的subl文件拷贝到/usr/bin/路径下并作修改如下：\n ```\n#!/bin/sh\nexport LD_PRELOAD=/you_install_path/sublime_text/libsublime-imfix.so\nexec /you_install_path/sublime_text/sublime_text \"$@\"\n```\n使用subl就可以打开sublime并输入中文了\n\n### **4.ubuntu安装vnc服务器**\n> sudo apt-get install tightvncserver 安装VNC服务器\n> tightvncserver 启动vnc服务器， 之后会要求输⼊密码， 任意输⼊密码（⼤于6个数）\n\n打开vnc viewer软件， 输⼊IP:n ,IP为vnc服务器的ip地址， n代表打开的窗⼝个数， 连接vnc服务器， 输⼊刚\n才在服务器上的密码进⼊系统\n\n### **5.ubuntu安装ftp服务器**\n\n 1. ⾸先服务器要安装ftp软件,查看是否已经安装ftp软件下：\n`sudo apt-get install vsftpd` 安装ftp软件\n`which vsftpd` 查看软件是否安装成功\n如果看到有vsftpd的⽬录说明服务器已经安装了f tp软件\n\n2. 查看ftp 服务器状态\n`service vsftpd status` ,输出ftp服务器的状态\n\n3. 启动ftp服务器\n`service vsftpd start` 启动ftp服务器\n\n4. 重启ftp服务器\n`service vsftpd restart` 重启f tp服务器\n\n参考:[http://blog.csdn.net/f t1512975/article/details/6620227](http://blog.csdn.net/ft1512975/article/details/6620227)\n\n### **6.ubuntu使用screen在ssh下查看历史历史窗口**\n`sudo apt-get install screen` 安装该软件\n`screen` 开启一个新窗口，该窗口和普通的窗口功能一样\n当我们在该窗⼝执⾏程序时， 当前screen窗⼝中键⼊`C-a d`，即Ctrl键+a键， 之后再按下d键,会退回到\nscreen前的窗⼝， 该命令的好处是虽然我们退出了ssh连接， 但是我们的程序任然在执⾏中， 我们可以⽤\nssh再次连接后， 使⽤ `top` 指令可以查看程序的运⾏状态， 但⽆法恢复之前的运⾏界⾯， ⽽screen可以做\n到，**监控窗口已关闭但依然在运行的程序，并调出该窗口**。\n> 使⽤ screen -ls 列出screen窗⼝运⾏的数量， 每个窗⼝都有⾃⼰的编号，\n使⽤ screen -r 窗⼝的编号 连接之前退出的screen窗⼝(该窗⼝的退出⽅式必须是 C-a d )\nexit 可以退出当前的窗⼝， 并返回之前的窗⼝\nC-a ? 显⽰所有键绑定信息\nC-a w 显⽰所有窗⼝列表\nC-a C-a 切换到之前显⽰的窗⼝\nC-a c 创建⼀个新的运⾏shell的窗⼝并切换到该窗⼝\nC-a n 切换到下⼀个窗⼝ C-a p 切换到前⼀个窗⼝(与C-a n相对) C-a 0..9 切换到窗⼝0..9 C-a a 发送\nC-a到当前窗⼝ C-a d 暂时断开screen会话 C-a k 杀掉当前窗⼝ C-a进⼊拷贝/回滚模式\n\n参考：[在ssh、telnet断开之后继续执行程序](https://blog.csdn.net/wind19/article/details/4986458)\n\n### **7.ubuntu以root身份打开文件管理器(GNOME)**\n> sudo nautilus 以root用户打开文件管理器，可以在根目录的文件夹下进行操作\n\n\n\n\n\n  [1]: http://blog.csdn.net/u013989576/article/details/61618454","source":"_posts/linux系统安装及软件配置.md","raw":"---\ntitle: linux系统安装及软件配置 \ntags: [ubuntu系统, sublime配置]\ncategories:\n- ubuntu系统\ncomments: true\nsitemap: false\ngrammar_cjkRuby: true\n---\n2017-11-29\n\n###  **1.安装ubunut系统时一直卡在图标的位置无法进入安装界面**\n将系统bios里security boot设置为disable，重启后再重新进入安装状态；\n 如果仍然无法进入安装状态：在选择安装和试用的界面，将光标移动到ubunt上，按 ‘e’，系统进入一个设置界面，在`quiet splash`后面加 `nomodeset`(别忘了空格)，然后按F10后系统以不设置显示模式的状态可以进入安装界面，但此时分辨率较低，尤其在选择分区后无法直接点击“安装”按钮，而且无法点击菜单栏拖动，此时使用**alt + 鼠标左键**可以拖动窗口，然后按步骤安装系统即可。\n \n ### **2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统**\n 可能和电脑的intel核显卡和nvidia集成显卡的驱动有关，此时再以上面的nomodeset模式进入系统，使用指令`sudo apt-get install nvidia-current`，然后重启可以成功进入系统。\n       如果没有进入系统又卡在黑屏界面，则使用另一种方法：\n      1使用nomodeset模式进入系统，先安装Intel的核心显卡驱动，去官网下载update-tool工具，这是我下载的版本`intel-graphics-update-tool_2.0.2_amd64.deb`，然后安装即可。\n    ` sudo dpkg -i intel-graphics-update-tool_2.0.2_amd64.deb `\n    ` sudo apt-get -f install`\n    ` sudo apt-get update`\n安装完成后使用`glxinfo | grep rendering`可以查看安装的结果，显示yes表示安装成功\n      2安装nvidia的显卡驱动\n     ` lspci | grep -i nvidia`查看电脑是否支持英伟达显卡，安装官网安装驱动\n      a关闭图像界面和禁用nouveau\n         进入字符界面`ctrl + alt + f1`后登录，`sudo serivce lightdm stop`关闭图像界面服务，禁用nouveau第三方驱动(步骤略)，`lsmod | nouveau`无输出则禁用成功\n      b 安装nvidia的deb文件即可\n     安装完成后使用`cat /proc/driver/nvidia/version`查看驱动版本，使用`nvidia-smi`也可以查看驱动及显卡的硬件信息\n 所有的驱动安装完成后，重启进入系统，如果还没有进入系统，则按上述的办法重安nvidia驱动，使用`sudo apt-get remove nvidia`和`sudo /usr/bin/nvidia-uninstall`将驱动卸载干净再重新安装。\n ### **3.配置sublime + python3的运行环境**\n #### 3.1 首先在ubuntu16.04下安装sublime text3\n > sudo add-apt-repository ppa:webupd8team/sublime-text-3 添加apt的安装包来源\n > sudo apt-get update 更新软件源\n > sudo apt-get install sublime-text-installer 安装sublime text\n \n 安装完成后输入`subl 文件名`，如果该⽂件存在就会以sublime text打开， 否则就创建该⽂件， 默认的有代码\n提⽰和⾼亮功能， 选择运⾏的环境后， Ctrl + B 可以编译运⾏编写的代码\n\nPPA 全称为 Personal Package Archives（个⼈软件包档案） ,通常 PPA 源⾥的软件是官⽅源⾥没有的， 或\n者是最新版本的软件。 相对于通过 Deb 包安装来说， 使⽤ PPA 的好处是， ⼀旦软件有更新， 通过` sudo\napt-get upgrade` 这样命令就可以直接升级到新版本。\n在 Ubuntu Karmic (9.10) 我们可以使⽤ `add-apt-repository` 脚本添加 ppa 到当前的库中并且⾃动导⼊\n公钥。 在终端下使⽤语法： `add-apt-repository ppa:<ppa_name>`\n \n #### 3.2 配置python3环境\n A   新建运行环境使用Tools==>Build System==>New Build Systems生成一个配置文件，我们可以改   名字为python3.sublime-build，python3就成为了build system中的一个选项了，在该文件中写入：\n ```bash\n{\n\"shell_cmd\": \"python3 -u \\\"$file\\\"\",\n\n\"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n\n\"selector\": \"source.python\",\n}\n```\n保存后在build system中选择python3，使用`ctrl + B就`可以运行代码了\n```\nimport sys\nprint(sys.version)\nprint(sys.version_info)\n```\n上面的代码可以输出使用的python版本，python2版本可以直接选择Tools==>build system中的python就行，应为在系统中默认的是python2，所以这里要构建python3的运行环境。\nB  在sublime中加入anaconda的插件，特别好使\n先安装package control，然后安装anaconda的插件，点击Preferences==>Package Settings==>Anaconda==>Settings User生成文件Anaconda.sublime-settings，里面写入下面代码：\n```\n{\n\n\"anaconda_linting\": false,\n\n//保存文件后自动pep8格式化\n\n\"auto_formatting\": true,\n\n\"enable_signatures_tooltip\": false,\n// close the document in the function or packages\n\n\"python_interpreter\": \"/usr/bin/python3\"\n\n}\n```\n配置后，函数可以补全，可以查看定义等\n\n#### 3.3 解决sublime无法输入中文问题\n`sudo apt-get update && sudo apt-get upgrade`  克隆项目到本地 \n\n`git clone https://github.com/lyfeyaj/sublime-text-imfix.git `  运行脚本 \n`cd sublime-text-imfix && ./sublime-imfix`\n \n最后重启即可\n如果上述方法不可行，则：\n 1将sublime-test-imfix/lib路径下的libsublime-imfix.so拷贝到sublime的文件夹下\n 2 将sublime-test-imfix/src路径下的subl文件拷贝到/usr/bin/路径下并作修改如下：\n ```\n#!/bin/sh\nexport LD_PRELOAD=/you_install_path/sublime_text/libsublime-imfix.so\nexec /you_install_path/sublime_text/sublime_text \"$@\"\n```\n使用subl就可以打开sublime并输入中文了\n\n### **4.ubuntu安装vnc服务器**\n> sudo apt-get install tightvncserver 安装VNC服务器\n> tightvncserver 启动vnc服务器， 之后会要求输⼊密码， 任意输⼊密码（⼤于6个数）\n\n打开vnc viewer软件， 输⼊IP:n ,IP为vnc服务器的ip地址， n代表打开的窗⼝个数， 连接vnc服务器， 输⼊刚\n才在服务器上的密码进⼊系统\n\n### **5.ubuntu安装ftp服务器**\n\n 1. ⾸先服务器要安装ftp软件,查看是否已经安装ftp软件下：\n`sudo apt-get install vsftpd` 安装ftp软件\n`which vsftpd` 查看软件是否安装成功\n如果看到有vsftpd的⽬录说明服务器已经安装了f tp软件\n\n2. 查看ftp 服务器状态\n`service vsftpd status` ,输出ftp服务器的状态\n\n3. 启动ftp服务器\n`service vsftpd start` 启动ftp服务器\n\n4. 重启ftp服务器\n`service vsftpd restart` 重启f tp服务器\n\n参考:[http://blog.csdn.net/f t1512975/article/details/6620227](http://blog.csdn.net/ft1512975/article/details/6620227)\n\n### **6.ubuntu使用screen在ssh下查看历史历史窗口**\n`sudo apt-get install screen` 安装该软件\n`screen` 开启一个新窗口，该窗口和普通的窗口功能一样\n当我们在该窗⼝执⾏程序时， 当前screen窗⼝中键⼊`C-a d`，即Ctrl键+a键， 之后再按下d键,会退回到\nscreen前的窗⼝， 该命令的好处是虽然我们退出了ssh连接， 但是我们的程序任然在执⾏中， 我们可以⽤\nssh再次连接后， 使⽤ `top` 指令可以查看程序的运⾏状态， 但⽆法恢复之前的运⾏界⾯， ⽽screen可以做\n到，**监控窗口已关闭但依然在运行的程序，并调出该窗口**。\n> 使⽤ screen -ls 列出screen窗⼝运⾏的数量， 每个窗⼝都有⾃⼰的编号，\n使⽤ screen -r 窗⼝的编号 连接之前退出的screen窗⼝(该窗⼝的退出⽅式必须是 C-a d )\nexit 可以退出当前的窗⼝， 并返回之前的窗⼝\nC-a ? 显⽰所有键绑定信息\nC-a w 显⽰所有窗⼝列表\nC-a C-a 切换到之前显⽰的窗⼝\nC-a c 创建⼀个新的运⾏shell的窗⼝并切换到该窗⼝\nC-a n 切换到下⼀个窗⼝ C-a p 切换到前⼀个窗⼝(与C-a n相对) C-a 0..9 切换到窗⼝0..9 C-a a 发送\nC-a到当前窗⼝ C-a d 暂时断开screen会话 C-a k 杀掉当前窗⼝ C-a进⼊拷贝/回滚模式\n\n参考：[在ssh、telnet断开之后继续执行程序](https://blog.csdn.net/wind19/article/details/4986458)\n\n### **7.ubuntu以root身份打开文件管理器(GNOME)**\n> sudo nautilus 以root用户打开文件管理器，可以在根目录的文件夹下进行操作\n\n\n\n\n\n  [1]: http://blog.csdn.net/u013989576/article/details/61618454","slug":"linux系统安装及软件配置","published":1,"date":"2018-04-30T11:37:33.625Z","updated":"2018-04-30T13:34:50.039Z","layout":"post","photos":[],"link":"","_id":"cjgmb0njv0008qcve8gk72ejk","content":"<p>2017-11-29</p>\n<h3 id=\"1-安装ubunut系统时一直卡在图标的位置无法进入安装界面\"><a href=\"#1-安装ubunut系统时一直卡在图标的位置无法进入安装界面\" class=\"headerlink\" title=\"1.安装ubunut系统时一直卡在图标的位置无法进入安装界面\"></a><strong>1.安装ubunut系统时一直卡在图标的位置无法进入安装界面</strong></h3><p>将系统bios里security boot设置为disable，重启后再重新进入安装状态；<br> 如果仍然无法进入安装状态：在选择安装和试用的界面，将光标移动到ubunt上，按 ‘e’，系统进入一个设置界面，在<code>quiet splash</code>后面加 <code>nomodeset</code>(别忘了空格)，然后按F10后系统以不设置显示模式的状态可以进入安装界面，但此时分辨率较低，尤其在选择分区后无法直接点击“安装”按钮，而且无法点击菜单栏拖动，此时使用<strong>alt + 鼠标左键</strong>可以拖动窗口，然后按步骤安装系统即可。</p>\n<h3 id=\"2-电脑安装ubuntu16-04后重启一直黑屏无法进入系统\"><a href=\"#2-电脑安装ubuntu16-04后重启一直黑屏无法进入系统\" class=\"headerlink\" title=\"2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统\"></a><strong>2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统</strong></h3><p> 可能和电脑的intel核显卡和nvidia集成显卡的驱动有关，此时再以上面的nomodeset模式进入系统，使用指令<code>sudo apt-get install nvidia-current</code>，然后重启可以成功进入系统。<br>       如果没有进入系统又卡在黑屏界面，则使用另一种方法：<br>      1使用nomodeset模式进入系统，先安装Intel的核心显卡驱动，去官网下载update-tool工具，这是我下载的版本<code>intel-graphics-update-tool_2.0.2_amd64.deb</code>，然后安装即可。<br>    <code>sudo dpkg -i intel-graphics-update-tool_2.0.2_amd64.deb</code><br>    <code>sudo apt-get -f install</code><br>    <code>sudo apt-get update</code><br>安装完成后使用<code>glxinfo | grep rendering</code>可以查看安装的结果，显示yes表示安装成功<br>      2安装nvidia的显卡驱动<br>     <code>lspci | grep -i nvidia</code>查看电脑是否支持英伟达显卡，安装官网安装驱动<br>      a关闭图像界面和禁用nouveau<br>         进入字符界面<code>ctrl + alt + f1</code>后登录，<code>sudo serivce lightdm stop</code>关闭图像界面服务，禁用nouveau第三方驱动(步骤略)，<code>lsmod | nouveau</code>无输出则禁用成功<br>      b 安装nvidia的deb文件即可<br>     安装完成后使用<code>cat /proc/driver/nvidia/version</code>查看驱动版本，使用<code>nvidia-smi</code>也可以查看驱动及显卡的硬件信息<br> 所有的驱动安装完成后，重启进入系统，如果还没有进入系统，则按上述的办法重安nvidia驱动，使用<code>sudo apt-get remove nvidia</code>和<code>sudo /usr/bin/nvidia-uninstall</code>将驱动卸载干净再重新安装。</p>\n<h3 id=\"3-配置sublime-python3的运行环境\"><a href=\"#3-配置sublime-python3的运行环境\" class=\"headerlink\" title=\"3.配置sublime + python3的运行环境\"></a><strong>3.配置sublime + python3的运行环境</strong></h3><h4 id=\"3-1-首先在ubuntu16-04下安装sublime-text3\"><a href=\"#3-1-首先在ubuntu16-04下安装sublime-text3\" class=\"headerlink\" title=\"3.1 首先在ubuntu16.04下安装sublime text3\"></a>3.1 首先在ubuntu16.04下安装sublime text3</h4><blockquote>\n<p>sudo add-apt-repository ppa:webupd8team/sublime-text-3 添加apt的安装包来源<br>sudo apt-get update 更新软件源<br>sudo apt-get install sublime-text-installer 安装sublime text</p>\n</blockquote>\n<p> 安装完成后输入<code>subl 文件名</code>，如果该⽂件存在就会以sublime text打开， 否则就创建该⽂件， 默认的有代码<br>提⽰和⾼亮功能， 选择运⾏的环境后， Ctrl + B 可以编译运⾏编写的代码</p>\n<p>PPA 全称为 Personal Package Archives（个⼈软件包档案） ,通常 PPA 源⾥的软件是官⽅源⾥没有的， 或<br>者是最新版本的软件。 相对于通过 Deb 包安装来说， 使⽤ PPA 的好处是， ⼀旦软件有更新， 通过<code>sudo\napt-get upgrade</code> 这样命令就可以直接升级到新版本。<br>在 Ubuntu Karmic (9.10) 我们可以使⽤ <code>add-apt-repository</code> 脚本添加 ppa 到当前的库中并且⾃动导⼊<br>公钥。 在终端下使⽤语法： <code>add-apt-repository ppa:&lt;ppa_name&gt;</code></p>\n<h4 id=\"3-2-配置python3环境\"><a href=\"#3-2-配置python3环境\" class=\"headerlink\" title=\"3.2 配置python3环境\"></a>3.2 配置python3环境</h4><p> A   新建运行环境使用Tools==&gt;Build System==&gt;New Build Systems生成一个配置文件，我们可以改   名字为python3.sublime-build，python3就成为了build system中的一个选项了，在该文件中写入：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"shell_cmd\"</span>: <span class=\"string\">\"python3 -u \\\"<span class=\"variable\">$file</span>\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"selector\"</span>: <span class=\"string\">\"source.python\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存后在build system中选择python3，使用<code>ctrl + B就</code>可以运行代码了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">print(sys.version)</span><br><span class=\"line\">print(sys.version_info)</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码可以输出使用的python版本，python2版本可以直接选择Tools==&gt;build system中的python就行，应为在系统中默认的是python2，所以这里要构建python3的运行环境。<br>B  在sublime中加入anaconda的插件，特别好使<br>先安装package control，然后安装anaconda的插件，点击Preferences==&gt;Package Settings==&gt;Anaconda==&gt;Settings User生成文件Anaconda.sublime-settings，里面写入下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;anaconda_linting&quot;: false,</span><br><span class=\"line\"></span><br><span class=\"line\">//保存文件后自动pep8格式化</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;auto_formatting&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;enable_signatures_tooltip&quot;: false,</span><br><span class=\"line\">// close the document in the function or packages</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;python_interpreter&quot;: &quot;/usr/bin/python3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置后，函数可以补全，可以查看定义等</p>\n<h4 id=\"3-3-解决sublime无法输入中文问题\"><a href=\"#3-3-解决sublime无法输入中文问题\" class=\"headerlink\" title=\"3.3 解决sublime无法输入中文问题\"></a>3.3 解决sublime无法输入中文问题</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>  克隆项目到本地 </p>\n<p><code>git clone https://github.com/lyfeyaj/sublime-text-imfix.git</code>  运行脚本<br><code>cd sublime-text-imfix &amp;&amp; ./sublime-imfix</code></p>\n<p>最后重启即可<br>如果上述方法不可行，则：<br> 1将sublime-test-imfix/lib路径下的libsublime-imfix.so拷贝到sublime的文件夹下<br> 2 将sublime-test-imfix/src路径下的subl文件拷贝到/usr/bin/路径下并作修改如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">export LD_PRELOAD=/you_install_path/sublime_text/libsublime-imfix.so</span><br><span class=\"line\">exec /you_install_path/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure></p>\n<p>使用subl就可以打开sublime并输入中文了</p>\n<h3 id=\"4-ubuntu安装vnc服务器\"><a href=\"#4-ubuntu安装vnc服务器\" class=\"headerlink\" title=\"4.ubuntu安装vnc服务器\"></a><strong>4.ubuntu安装vnc服务器</strong></h3><blockquote>\n<p>sudo apt-get install tightvncserver 安装VNC服务器<br>tightvncserver 启动vnc服务器， 之后会要求输⼊密码， 任意输⼊密码（⼤于6个数）</p>\n</blockquote>\n<p>打开vnc viewer软件， 输⼊IP:n ,IP为vnc服务器的ip地址， n代表打开的窗⼝个数， 连接vnc服务器， 输⼊刚<br>才在服务器上的密码进⼊系统</p>\n<h3 id=\"5-ubuntu安装ftp服务器\"><a href=\"#5-ubuntu安装ftp服务器\" class=\"headerlink\" title=\"5.ubuntu安装ftp服务器\"></a><strong>5.ubuntu安装ftp服务器</strong></h3><ol>\n<li>⾸先服务器要安装ftp软件,查看是否已经安装ftp软件下：<br><code>sudo apt-get install vsftpd</code> 安装ftp软件<br><code>which vsftpd</code> 查看软件是否安装成功<br>如果看到有vsftpd的⽬录说明服务器已经安装了f tp软件</li>\n</ol>\n<ol start=\"2\">\n<li><p>查看ftp 服务器状态<br><code>service vsftpd status</code> ,输出ftp服务器的状态</p>\n</li>\n<li><p>启动ftp服务器<br><code>service vsftpd start</code> 启动ftp服务器</p>\n</li>\n<li><p>重启ftp服务器<br><code>service vsftpd restart</code> 重启f tp服务器</p>\n</li>\n</ol>\n<p>参考:<a href=\"http://blog.csdn.net/ft1512975/article/details/6620227\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/f t1512975/article/details/6620227</a></p>\n<h3 id=\"6-ubuntu使用screen在ssh下查看历史历史窗口\"><a href=\"#6-ubuntu使用screen在ssh下查看历史历史窗口\" class=\"headerlink\" title=\"6.ubuntu使用screen在ssh下查看历史历史窗口\"></a><strong>6.ubuntu使用screen在ssh下查看历史历史窗口</strong></h3><p><code>sudo apt-get install screen</code> 安装该软件<br><code>screen</code> 开启一个新窗口，该窗口和普通的窗口功能一样<br>当我们在该窗⼝执⾏程序时， 当前screen窗⼝中键⼊<code>C-a d</code>，即Ctrl键+a键， 之后再按下d键,会退回到<br>screen前的窗⼝， 该命令的好处是虽然我们退出了ssh连接， 但是我们的程序任然在执⾏中， 我们可以⽤<br>ssh再次连接后， 使⽤ <code>top</code> 指令可以查看程序的运⾏状态， 但⽆法恢复之前的运⾏界⾯， ⽽screen可以做<br>到，<strong>监控窗口已关闭但依然在运行的程序，并调出该窗口</strong>。</p>\n<blockquote>\n<p>使⽤ screen -ls 列出screen窗⼝运⾏的数量， 每个窗⼝都有⾃⼰的编号，<br>使⽤ screen -r 窗⼝的编号 连接之前退出的screen窗⼝(该窗⼝的退出⽅式必须是 C-a d )<br>exit 可以退出当前的窗⼝， 并返回之前的窗⼝<br>C-a ? 显⽰所有键绑定信息<br>C-a w 显⽰所有窗⼝列表<br>C-a C-a 切换到之前显⽰的窗⼝<br>C-a c 创建⼀个新的运⾏shell的窗⼝并切换到该窗⼝<br>C-a n 切换到下⼀个窗⼝ C-a p 切换到前⼀个窗⼝(与C-a n相对) C-a 0..9 切换到窗⼝0..9 C-a a 发送<br>C-a到当前窗⼝ C-a d 暂时断开screen会话 C-a k 杀掉当前窗⼝ C-a进⼊拷贝/回滚模式</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/wind19/article/details/4986458\" target=\"_blank\" rel=\"noopener\">在ssh、telnet断开之后继续执行程序</a></p>\n<h3 id=\"7-ubuntu以root身份打开文件管理器-GNOME\"><a href=\"#7-ubuntu以root身份打开文件管理器-GNOME\" class=\"headerlink\" title=\"7.ubuntu以root身份打开文件管理器(GNOME)\"></a><strong>7.ubuntu以root身份打开文件管理器(GNOME)</strong></h3><blockquote>\n<p>sudo nautilus 以root用户打开文件管理器，可以在根目录的文件夹下进行操作</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>2017-11-29</p>\n<h3 id=\"1-安装ubunut系统时一直卡在图标的位置无法进入安装界面\"><a href=\"#1-安装ubunut系统时一直卡在图标的位置无法进入安装界面\" class=\"headerlink\" title=\"1.安装ubunut系统时一直卡在图标的位置无法进入安装界面\"></a><strong>1.安装ubunut系统时一直卡在图标的位置无法进入安装界面</strong></h3><p>将系统bios里security boot设置为disable，重启后再重新进入安装状态；<br> 如果仍然无法进入安装状态：在选择安装和试用的界面，将光标移动到ubunt上，按 ‘e’，系统进入一个设置界面，在<code>quiet splash</code>后面加 <code>nomodeset</code>(别忘了空格)，然后按F10后系统以不设置显示模式的状态可以进入安装界面，但此时分辨率较低，尤其在选择分区后无法直接点击“安装”按钮，而且无法点击菜单栏拖动，此时使用<strong>alt + 鼠标左键</strong>可以拖动窗口，然后按步骤安装系统即可。</p>\n<h3 id=\"2-电脑安装ubuntu16-04后重启一直黑屏无法进入系统\"><a href=\"#2-电脑安装ubuntu16-04后重启一直黑屏无法进入系统\" class=\"headerlink\" title=\"2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统\"></a><strong>2.电脑安装ubuntu16.04后重启一直黑屏无法进入系统</strong></h3><p> 可能和电脑的intel核显卡和nvidia集成显卡的驱动有关，此时再以上面的nomodeset模式进入系统，使用指令<code>sudo apt-get install nvidia-current</code>，然后重启可以成功进入系统。<br>       如果没有进入系统又卡在黑屏界面，则使用另一种方法：<br>      1使用nomodeset模式进入系统，先安装Intel的核心显卡驱动，去官网下载update-tool工具，这是我下载的版本<code>intel-graphics-update-tool_2.0.2_amd64.deb</code>，然后安装即可。<br>    <code>sudo dpkg -i intel-graphics-update-tool_2.0.2_amd64.deb</code><br>    <code>sudo apt-get -f install</code><br>    <code>sudo apt-get update</code><br>安装完成后使用<code>glxinfo | grep rendering</code>可以查看安装的结果，显示yes表示安装成功<br>      2安装nvidia的显卡驱动<br>     <code>lspci | grep -i nvidia</code>查看电脑是否支持英伟达显卡，安装官网安装驱动<br>      a关闭图像界面和禁用nouveau<br>         进入字符界面<code>ctrl + alt + f1</code>后登录，<code>sudo serivce lightdm stop</code>关闭图像界面服务，禁用nouveau第三方驱动(步骤略)，<code>lsmod | nouveau</code>无输出则禁用成功<br>      b 安装nvidia的deb文件即可<br>     安装完成后使用<code>cat /proc/driver/nvidia/version</code>查看驱动版本，使用<code>nvidia-smi</code>也可以查看驱动及显卡的硬件信息<br> 所有的驱动安装完成后，重启进入系统，如果还没有进入系统，则按上述的办法重安nvidia驱动，使用<code>sudo apt-get remove nvidia</code>和<code>sudo /usr/bin/nvidia-uninstall</code>将驱动卸载干净再重新安装。</p>\n<h3 id=\"3-配置sublime-python3的运行环境\"><a href=\"#3-配置sublime-python3的运行环境\" class=\"headerlink\" title=\"3.配置sublime + python3的运行环境\"></a><strong>3.配置sublime + python3的运行环境</strong></h3><h4 id=\"3-1-首先在ubuntu16-04下安装sublime-text3\"><a href=\"#3-1-首先在ubuntu16-04下安装sublime-text3\" class=\"headerlink\" title=\"3.1 首先在ubuntu16.04下安装sublime text3\"></a>3.1 首先在ubuntu16.04下安装sublime text3</h4><blockquote>\n<p>sudo add-apt-repository ppa:webupd8team/sublime-text-3 添加apt的安装包来源<br>sudo apt-get update 更新软件源<br>sudo apt-get install sublime-text-installer 安装sublime text</p>\n</blockquote>\n<p> 安装完成后输入<code>subl 文件名</code>，如果该⽂件存在就会以sublime text打开， 否则就创建该⽂件， 默认的有代码<br>提⽰和⾼亮功能， 选择运⾏的环境后， Ctrl + B 可以编译运⾏编写的代码</p>\n<p>PPA 全称为 Personal Package Archives（个⼈软件包档案） ,通常 PPA 源⾥的软件是官⽅源⾥没有的， 或<br>者是最新版本的软件。 相对于通过 Deb 包安装来说， 使⽤ PPA 的好处是， ⼀旦软件有更新， 通过<code>sudo\napt-get upgrade</code> 这样命令就可以直接升级到新版本。<br>在 Ubuntu Karmic (9.10) 我们可以使⽤ <code>add-apt-repository</code> 脚本添加 ppa 到当前的库中并且⾃动导⼊<br>公钥。 在终端下使⽤语法： <code>add-apt-repository ppa:&lt;ppa_name&gt;</code></p>\n<h4 id=\"3-2-配置python3环境\"><a href=\"#3-2-配置python3环境\" class=\"headerlink\" title=\"3.2 配置python3环境\"></a>3.2 配置python3环境</h4><p> A   新建运行环境使用Tools==&gt;Build System==&gt;New Build Systems生成一个配置文件，我们可以改   名字为python3.sublime-build，python3就成为了build system中的一个选项了，在该文件中写入：<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"shell_cmd\"</span>: <span class=\"string\">\"python3 -u \\\"<span class=\"variable\">$file</span>\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"file_regex\"</span>: <span class=\"string\">\"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"selector\"</span>: <span class=\"string\">\"source.python\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>保存后在build system中选择python3，使用<code>ctrl + B就</code>可以运行代码了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">print(sys.version)</span><br><span class=\"line\">print(sys.version_info)</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码可以输出使用的python版本，python2版本可以直接选择Tools==&gt;build system中的python就行，应为在系统中默认的是python2，所以这里要构建python3的运行环境。<br>B  在sublime中加入anaconda的插件，特别好使<br>先安装package control，然后安装anaconda的插件，点击Preferences==&gt;Package Settings==&gt;Anaconda==&gt;Settings User生成文件Anaconda.sublime-settings，里面写入下面代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;anaconda_linting&quot;: false,</span><br><span class=\"line\"></span><br><span class=\"line\">//保存文件后自动pep8格式化</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;auto_formatting&quot;: true,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;enable_signatures_tooltip&quot;: false,</span><br><span class=\"line\">// close the document in the function or packages</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;python_interpreter&quot;: &quot;/usr/bin/python3&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>配置后，函数可以补全，可以查看定义等</p>\n<h4 id=\"3-3-解决sublime无法输入中文问题\"><a href=\"#3-3-解决sublime无法输入中文问题\" class=\"headerlink\" title=\"3.3 解决sublime无法输入中文问题\"></a>3.3 解决sublime无法输入中文问题</h4><p><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>  克隆项目到本地 </p>\n<p><code>git clone https://github.com/lyfeyaj/sublime-text-imfix.git</code>  运行脚本<br><code>cd sublime-text-imfix &amp;&amp; ./sublime-imfix</code></p>\n<p>最后重启即可<br>如果上述方法不可行，则：<br> 1将sublime-test-imfix/lib路径下的libsublime-imfix.so拷贝到sublime的文件夹下<br> 2 将sublime-test-imfix/src路径下的subl文件拷贝到/usr/bin/路径下并作修改如下：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\">export LD_PRELOAD=/you_install_path/sublime_text/libsublime-imfix.so</span><br><span class=\"line\">exec /you_install_path/sublime_text/sublime_text &quot;$@&quot;</span><br></pre></td></tr></table></figure></p>\n<p>使用subl就可以打开sublime并输入中文了</p>\n<h3 id=\"4-ubuntu安装vnc服务器\"><a href=\"#4-ubuntu安装vnc服务器\" class=\"headerlink\" title=\"4.ubuntu安装vnc服务器\"></a><strong>4.ubuntu安装vnc服务器</strong></h3><blockquote>\n<p>sudo apt-get install tightvncserver 安装VNC服务器<br>tightvncserver 启动vnc服务器， 之后会要求输⼊密码， 任意输⼊密码（⼤于6个数）</p>\n</blockquote>\n<p>打开vnc viewer软件， 输⼊IP:n ,IP为vnc服务器的ip地址， n代表打开的窗⼝个数， 连接vnc服务器， 输⼊刚<br>才在服务器上的密码进⼊系统</p>\n<h3 id=\"5-ubuntu安装ftp服务器\"><a href=\"#5-ubuntu安装ftp服务器\" class=\"headerlink\" title=\"5.ubuntu安装ftp服务器\"></a><strong>5.ubuntu安装ftp服务器</strong></h3><ol>\n<li>⾸先服务器要安装ftp软件,查看是否已经安装ftp软件下：<br><code>sudo apt-get install vsftpd</code> 安装ftp软件<br><code>which vsftpd</code> 查看软件是否安装成功<br>如果看到有vsftpd的⽬录说明服务器已经安装了f tp软件</li>\n</ol>\n<ol start=\"2\">\n<li><p>查看ftp 服务器状态<br><code>service vsftpd status</code> ,输出ftp服务器的状态</p>\n</li>\n<li><p>启动ftp服务器<br><code>service vsftpd start</code> 启动ftp服务器</p>\n</li>\n<li><p>重启ftp服务器<br><code>service vsftpd restart</code> 重启f tp服务器</p>\n</li>\n</ol>\n<p>参考:<a href=\"http://blog.csdn.net/ft1512975/article/details/6620227\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/f t1512975/article/details/6620227</a></p>\n<h3 id=\"6-ubuntu使用screen在ssh下查看历史历史窗口\"><a href=\"#6-ubuntu使用screen在ssh下查看历史历史窗口\" class=\"headerlink\" title=\"6.ubuntu使用screen在ssh下查看历史历史窗口\"></a><strong>6.ubuntu使用screen在ssh下查看历史历史窗口</strong></h3><p><code>sudo apt-get install screen</code> 安装该软件<br><code>screen</code> 开启一个新窗口，该窗口和普通的窗口功能一样<br>当我们在该窗⼝执⾏程序时， 当前screen窗⼝中键⼊<code>C-a d</code>，即Ctrl键+a键， 之后再按下d键,会退回到<br>screen前的窗⼝， 该命令的好处是虽然我们退出了ssh连接， 但是我们的程序任然在执⾏中， 我们可以⽤<br>ssh再次连接后， 使⽤ <code>top</code> 指令可以查看程序的运⾏状态， 但⽆法恢复之前的运⾏界⾯， ⽽screen可以做<br>到，<strong>监控窗口已关闭但依然在运行的程序，并调出该窗口</strong>。</p>\n<blockquote>\n<p>使⽤ screen -ls 列出screen窗⼝运⾏的数量， 每个窗⼝都有⾃⼰的编号，<br>使⽤ screen -r 窗⼝的编号 连接之前退出的screen窗⼝(该窗⼝的退出⽅式必须是 C-a d )<br>exit 可以退出当前的窗⼝， 并返回之前的窗⼝<br>C-a ? 显⽰所有键绑定信息<br>C-a w 显⽰所有窗⼝列表<br>C-a C-a 切换到之前显⽰的窗⼝<br>C-a c 创建⼀个新的运⾏shell的窗⼝并切换到该窗⼝<br>C-a n 切换到下⼀个窗⼝ C-a p 切换到前⼀个窗⼝(与C-a n相对) C-a 0..9 切换到窗⼝0..9 C-a a 发送<br>C-a到当前窗⼝ C-a d 暂时断开screen会话 C-a k 杀掉当前窗⼝ C-a进⼊拷贝/回滚模式</p>\n</blockquote>\n<p>参考：<a href=\"https://blog.csdn.net/wind19/article/details/4986458\" target=\"_blank\" rel=\"noopener\">在ssh、telnet断开之后继续执行程序</a></p>\n<h3 id=\"7-ubuntu以root身份打开文件管理器-GNOME\"><a href=\"#7-ubuntu以root身份打开文件管理器-GNOME\" class=\"headerlink\" title=\"7.ubuntu以root身份打开文件管理器(GNOME)\"></a><strong>7.ubuntu以root身份打开文件管理器(GNOME)</strong></h3><blockquote>\n<p>sudo nautilus 以root用户打开文件管理器，可以在根目录的文件夹下进行操作</p>\n</blockquote>\n"},{"title":"python学习笔记","comments":1,"sitemap":false,"grammar_cjkRuby":true,"_content":"\n\n###  1. python里*args和**kwargs的用法\n`引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple`\n`**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前`\n```python\ndef foo(*args, **kwargs):\n    print 'args = ', args\n    print 'kwargs = ', kwargs\n    print '---------------------------------------'\n\nif __name__ == '__main__':\n    foo(1,2,3,4)                             #参数只传到*args中\n    foo(a=1,b=2,c=3)                         #参数只传到**kwargs中\n    foo(1,2,3,4, a=1,b=2,c=3)                #参数可以传到*args和**kwargs中\n    foo('a', 1, None, a=1, b='2', c=3)\n```\n运行结果：\n```python\nargs =  (1, 2, 3, 4)\nkwargs =  {}\n---------------------------------------\nargs =  ()\nkwargs =  {'a': 1, 'c': 3, 'b': 2}\n---------------------------------------\nargs =  (1, 2, 3, 4)\nkwargs =  {'a': 1, 'c': 3, 'b': 2}\n---------------------------------------\nargs =  ('a', 1, None)\nkwargs =  {'a': 1, 'c': 3, 'b': '2'}\n---------------------------------------\n```\n###  2.python对txt文件的操作\n2.1 使用**open()** 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError\n`open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=T)`\n参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。\n\n‘r’表示打开文件只读，不能写。\n\n‘w’表示打开文件只写，并且清空文件。\n\n‘x’表示独占打开文件，如果文件已经存打开就会失败。\n\n‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。\n\n‘b’表示二进制的模式打开文件。\n\n‘t’表示文本模式，默认情况下就是这种模式。\n\n‘+’打开文件更新（读取或写入）。\n\n缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空\n打开文件的操作常使用异常捕捉来\n\nstr.strip(rm)方法,去除字符串开头和结尾的rm字符，`readline()`获取的是一行文本的字符串形式\n```python\ndef open_file(filename):\n    \"\"\"打开一个文件，存储到列表中，并返回该列表\"\"\"\n    try:\n        with open(filename) as file_open:    #打开文件，因为只有一行，所以不用使用循环\n            data = file_open.readline()\n        # [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用\n        file_data = data.strip().split(',')\n        \"\"\"split方法返回字符串列表，如果只是一个标识符接受，则不会报错\n        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的\n        字符串列表的个数不一致而导致ValueError\"\"\"\n        return file_data\n    except IOError as ioerr:\n        print 'IOError:' + str(ioerr)\n        return None\n    except ValueError as valerr:\n        print 'ValueError:' + str(valerr)\n        return None\n```\n `(role, line_spoken) = each_line.split(' ,')`，多重赋值(),[]均可以接受数据-字符串列表，**each_line本身不会被分割，保持不变**\n`[role, line_spoken] = each_line.split(', ',1)`\n`[string1, string2, string3] = each_line.split(', ', 2)`如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分\n\n2.2 使用**open()** 函数和**file_object.write()** 方法写入文本\n**方法一、增加额外的逻辑来处理异常**,使用finally来关闭文件对象\n```python\ntry:   #文件写入过程\n    man_file = open('man_data.txt', 'w')         #新建文件\n    other_file = open('other_data.txt', 'w')\n    \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，\n    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"\n    # print >> man_file, man                       #文件对象里传入数据\n    # print >> other_file, other\n    man_file.write(str(man))\n    other_file.write(str(other))\nexcept IOError:\n    print 'File error.'\nfinally:  #无论有无异常，此句都会执行，\n    man_file.close()\n    other_file.close()\n```\n**方法二、with处理文件异常**,不用考虑关闭文件对象\n```python\ntry:   #文件写入过程\n    # with open('man_data.txt', 'w') as man_file:         #新建文件\n    #     # print >> man_file, man                        #文件对象里传入数据\n    #     man_file.write(str(man))\n    # with open('other_data.txt', 'w') as other_file:\n    #     \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，\n    #          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"\n    #     # print >> other_file, other\n    #     other_file.write(str(other))\n    with open('man_data.txt', 'w') as man_file, open('other_data.txt', 'w') as other_file:\n        #两个语句合并为一个with语句\n        man_file.write(str(man))\n        other_file.write(str(other))\nexcept IOError as err:\n    print 'File error:' + str(err)\n```\n2.3实例\n打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里\n\n```python\n# encoding:utf-8\n# file.readlines()读取数据的行数，'行数据\\n' 是该方法输出列表的每行数据的元素\nattribute_data = []\ntry:\n\twith open('./train_data.txt') as file,  open('./train_data2.txt','w') as file2:\n\t\traw_number = len(file.readlines())      # 计算文件的总行数\n\t\tfile.seek(0)                            # 回到第一行，因为每次使用readline，文本都会后退一行\n\t\tfor i in range(raw_number):\t        \t# 计算文件的总行数，设计循环逐行读入数据\t\n\t\t\ttext_line = file.readline()     \t# 每次调用该函数使文件下移一行\n\t\t\t# temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表\n\t\t\t# attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列\n\t\t\ttemp_file = text_line.strip().split(' ', 4)             \t# temp_file存储分割后的数据列表\n\t\t\tattribute_data = temp_file[0:4]      # 存储要使用的数据列\n\n\t\t\tfor data in attribute_data:          # 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格\n\t\t\t\tfile2.writelines(data)\n\t\t\t\tfile2.writelines(' ')            # 数据间加入空格\n\t\t\tfile2.writelines('\\n')               # 数据换行\n\nexcept IOError as err:\n    print 'File error:' + str(err)\nprint attribute_data \n````\n###  3.python函数shutil，实现文件的复制\n使用`shutil.copy(str_file1,str_file2)`将文件str_file1，复制到文件str_file2的位置\n\n### 4.python实现读取文件夹里文件名功能\n```python\nimport os \npath = 'the path of the directory'    # 读取文件路径\nlist_name = os.listdir(path)            # 读取路径下文件和文件夹的名\n```\n则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。","source":"_posts/python学习笔记.md","raw":"---\ntitle: python学习笔记\ntags: \n- Python\ncategories:\n- Python\ncomments: true\nsitemap: false\ngrammar_cjkRuby: true\n---\n\n\n###  1. python里*args和**kwargs的用法\n`引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple`\n`**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前`\n```python\ndef foo(*args, **kwargs):\n    print 'args = ', args\n    print 'kwargs = ', kwargs\n    print '---------------------------------------'\n\nif __name__ == '__main__':\n    foo(1,2,3,4)                             #参数只传到*args中\n    foo(a=1,b=2,c=3)                         #参数只传到**kwargs中\n    foo(1,2,3,4, a=1,b=2,c=3)                #参数可以传到*args和**kwargs中\n    foo('a', 1, None, a=1, b='2', c=3)\n```\n运行结果：\n```python\nargs =  (1, 2, 3, 4)\nkwargs =  {}\n---------------------------------------\nargs =  ()\nkwargs =  {'a': 1, 'c': 3, 'b': 2}\n---------------------------------------\nargs =  (1, 2, 3, 4)\nkwargs =  {'a': 1, 'c': 3, 'b': 2}\n---------------------------------------\nargs =  ('a', 1, None)\nkwargs =  {'a': 1, 'c': 3, 'b': '2'}\n---------------------------------------\n```\n###  2.python对txt文件的操作\n2.1 使用**open()** 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError\n`open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=T)`\n参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。\n\n‘r’表示打开文件只读，不能写。\n\n‘w’表示打开文件只写，并且清空文件。\n\n‘x’表示独占打开文件，如果文件已经存打开就会失败。\n\n‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。\n\n‘b’表示二进制的模式打开文件。\n\n‘t’表示文本模式，默认情况下就是这种模式。\n\n‘+’打开文件更新（读取或写入）。\n\n缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空\n打开文件的操作常使用异常捕捉来\n\nstr.strip(rm)方法,去除字符串开头和结尾的rm字符，`readline()`获取的是一行文本的字符串形式\n```python\ndef open_file(filename):\n    \"\"\"打开一个文件，存储到列表中，并返回该列表\"\"\"\n    try:\n        with open(filename) as file_open:    #打开文件，因为只有一行，所以不用使用循环\n            data = file_open.readline()\n        # [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用\n        file_data = data.strip().split(',')\n        \"\"\"split方法返回字符串列表，如果只是一个标识符接受，则不会报错\n        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的\n        字符串列表的个数不一致而导致ValueError\"\"\"\n        return file_data\n    except IOError as ioerr:\n        print 'IOError:' + str(ioerr)\n        return None\n    except ValueError as valerr:\n        print 'ValueError:' + str(valerr)\n        return None\n```\n `(role, line_spoken) = each_line.split(' ,')`，多重赋值(),[]均可以接受数据-字符串列表，**each_line本身不会被分割，保持不变**\n`[role, line_spoken] = each_line.split(', ',1)`\n`[string1, string2, string3] = each_line.split(', ', 2)`如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分\n\n2.2 使用**open()** 函数和**file_object.write()** 方法写入文本\n**方法一、增加额外的逻辑来处理异常**,使用finally来关闭文件对象\n```python\ntry:   #文件写入过程\n    man_file = open('man_data.txt', 'w')         #新建文件\n    other_file = open('other_data.txt', 'w')\n    \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，\n    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"\n    # print >> man_file, man                       #文件对象里传入数据\n    # print >> other_file, other\n    man_file.write(str(man))\n    other_file.write(str(other))\nexcept IOError:\n    print 'File error.'\nfinally:  #无论有无异常，此句都会执行，\n    man_file.close()\n    other_file.close()\n```\n**方法二、with处理文件异常**,不用考虑关闭文件对象\n```python\ntry:   #文件写入过程\n    # with open('man_data.txt', 'w') as man_file:         #新建文件\n    #     # print >> man_file, man                        #文件对象里传入数据\n    #     man_file.write(str(man))\n    # with open('other_data.txt', 'w') as other_file:\n    #     \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，\n    #          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"\n    #     # print >> other_file, other\n    #     other_file.write(str(other))\n    with open('man_data.txt', 'w') as man_file, open('other_data.txt', 'w') as other_file:\n        #两个语句合并为一个with语句\n        man_file.write(str(man))\n        other_file.write(str(other))\nexcept IOError as err:\n    print 'File error:' + str(err)\n```\n2.3实例\n打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里\n\n```python\n# encoding:utf-8\n# file.readlines()读取数据的行数，'行数据\\n' 是该方法输出列表的每行数据的元素\nattribute_data = []\ntry:\n\twith open('./train_data.txt') as file,  open('./train_data2.txt','w') as file2:\n\t\traw_number = len(file.readlines())      # 计算文件的总行数\n\t\tfile.seek(0)                            # 回到第一行，因为每次使用readline，文本都会后退一行\n\t\tfor i in range(raw_number):\t        \t# 计算文件的总行数，设计循环逐行读入数据\t\n\t\t\ttext_line = file.readline()     \t# 每次调用该函数使文件下移一行\n\t\t\t# temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表\n\t\t\t# attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列\n\t\t\ttemp_file = text_line.strip().split(' ', 4)             \t# temp_file存储分割后的数据列表\n\t\t\tattribute_data = temp_file[0:4]      # 存储要使用的数据列\n\n\t\t\tfor data in attribute_data:          # 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格\n\t\t\t\tfile2.writelines(data)\n\t\t\t\tfile2.writelines(' ')            # 数据间加入空格\n\t\t\tfile2.writelines('\\n')               # 数据换行\n\nexcept IOError as err:\n    print 'File error:' + str(err)\nprint attribute_data \n````\n###  3.python函数shutil，实现文件的复制\n使用`shutil.copy(str_file1,str_file2)`将文件str_file1，复制到文件str_file2的位置\n\n### 4.python实现读取文件夹里文件名功能\n```python\nimport os \npath = 'the path of the directory'    # 读取文件路径\nlist_name = os.listdir(path)            # 读取路径下文件和文件夹的名\n```\n则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。","slug":"python学习笔记","published":1,"date":"2018-04-20T12:49:59.065Z","updated":"2018-04-21T09:21:14.406Z","layout":"post","photos":[],"link":"","_id":"cjgmb0njx0009qcvetc5dszb7","content":"<h3 id=\"1-python里-args和-kwargs的用法\"><a href=\"#1-python里-args和-kwargs的用法\" class=\"headerlink\" title=\"1. python里*args和**kwargs的用法\"></a>1. python里*args和**kwargs的用法</h3><p><code>引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple</code><br><code>**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args = '</span>, args</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs = '</span>, kwargs</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'---------------------------------------'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)                             <span class=\"comment\">#参数只传到*args中</span></span><br><span class=\"line\">    foo(a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)                         <span class=\"comment\">#参数只传到**kwargs中</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)                <span class=\"comment\">#参数可以传到*args和**kwargs中</span></span><br><span class=\"line\">    foo(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"keyword\">None</span>, a=<span class=\"number\">1</span>, b=<span class=\"string\">'2'</span>, c=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args =  (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">kwargs =  &#123;&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  ()</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  (<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-python对txt文件的操作\"><a href=\"#2-python对txt文件的操作\" class=\"headerlink\" title=\"2.python对txt文件的操作\"></a>2.python对txt文件的操作</h3><p>2.1 使用<strong>open()</strong> 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError<br><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=T)</code><br>参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。</p>\n<p>‘r’表示打开文件只读，不能写。</p>\n<p>‘w’表示打开文件只写，并且清空文件。</p>\n<p>‘x’表示独占打开文件，如果文件已经存打开就会失败。</p>\n<p>‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。</p>\n<p>‘b’表示二进制的模式打开文件。</p>\n<p>‘t’表示文本模式，默认情况下就是这种模式。</p>\n<p>‘+’打开文件更新（读取或写入）。</p>\n<p>缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空<br>打开文件的操作常使用异常捕捉来</p>\n<p>str.strip(rm)方法,去除字符串开头和结尾的rm字符，<code>readline()</code>获取的是一行文本的字符串形式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_file</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"打开一个文件，存储到列表中，并返回该列表\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file_open:    <span class=\"comment\">#打开文件，因为只有一行，所以不用使用循环</span></span><br><span class=\"line\">            data = file_open.readline()</span><br><span class=\"line\">        <span class=\"comment\"># [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用</span></span><br><span class=\"line\">        file_data = data.strip().split(<span class=\"string\">','</span>)</span><br><span class=\"line\">        <span class=\"string\">\"\"\"split方法返回字符串列表，如果只是一个标识符接受，则不会报错</span></span><br><span class=\"line\"><span class=\"string\">        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的</span></span><br><span class=\"line\"><span class=\"string\">        字符串列表的个数不一致而导致ValueError\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> file_data</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> ioerr:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'IOError:'</span> + str(ioerr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> valerr:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'ValueError:'</span> + str(valerr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure></p>\n<p> <code>(role, line_spoken) = each_line.split(&#39; ,&#39;)</code>，多重赋值(),[]均可以接受数据-字符串列表，<strong>each_line本身不会被分割，保持不变</strong><br><code>[role, line_spoken] = each_line.split(&#39;, &#39;,1)</code><br><code>[string1, string2, string3] = each_line.split(&#39;, &#39;, 2)</code>如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分</p>\n<p>2.2 使用<strong>open()</strong> 函数和<strong>file_object.write()</strong> 方法写入文本<br><strong>方法一、增加额外的逻辑来处理异常</strong>,使用finally来关闭文件对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:   <span class=\"comment\">#文件写入过程</span></span><br><span class=\"line\">    man_file = open(<span class=\"string\">'man_data.txt'</span>, <span class=\"string\">'w'</span>)         <span class=\"comment\">#新建文件</span></span><br><span class=\"line\">    other_file = open(<span class=\"string\">'other_data.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    <span class=\"string\">\"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class=\"line\"><span class=\"string\">    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># print &gt;&gt; man_file, man                       #文件对象里传入数据</span></span><br><span class=\"line\">    <span class=\"comment\"># print &gt;&gt; other_file, other</span></span><br><span class=\"line\">    man_file.write(str(man))</span><br><span class=\"line\">    other_file.write(str(other))</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error.'</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:  <span class=\"comment\">#无论有无异常，此句都会执行，</span></span><br><span class=\"line\">    man_file.close()</span><br><span class=\"line\">    other_file.close()</span><br></pre></td></tr></table></figure></p>\n<p><strong>方法二、with处理文件异常</strong>,不用考虑关闭文件对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:   <span class=\"comment\">#文件写入过程</span></span><br><span class=\"line\">    <span class=\"comment\"># with open('man_data.txt', 'w') as man_file:         #新建文件</span></span><br><span class=\"line\">    <span class=\"comment\">#     # print &gt;&gt; man_file, man                        #文件对象里传入数据</span></span><br><span class=\"line\">    <span class=\"comment\">#     man_file.write(str(man))</span></span><br><span class=\"line\">    <span class=\"comment\"># with open('other_data.txt', 'w') as other_file:</span></span><br><span class=\"line\">    <span class=\"comment\">#     \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class=\"line\">    <span class=\"comment\">#          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     # print &gt;&gt; other_file, other</span></span><br><span class=\"line\">    <span class=\"comment\">#     other_file.write(str(other))</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'man_data.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> man_file, open(<span class=\"string\">'other_data.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> other_file:</span><br><span class=\"line\">        <span class=\"comment\">#两个语句合并为一个with语句</span></span><br><span class=\"line\">        man_file.write(str(man))</span><br><span class=\"line\">        other_file.write(str(other))</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error:'</span> + str(err)</span><br></pre></td></tr></table></figure></p>\n<p>2.3实例<br>打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># file.readlines()读取数据的行数，'行数据\\n' 是该方法输出列表的每行数据的元素</span></span><br><span class=\"line\">attribute_data = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> open(<span class=\"string\">'./train_data.txt'</span>) <span class=\"keyword\">as</span> file,  open(<span class=\"string\">'./train_data2.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file2:</span><br><span class=\"line\">\t\traw_number = len(file.readlines())      <span class=\"comment\"># 计算文件的总行数</span></span><br><span class=\"line\">\t\tfile.seek(<span class=\"number\">0</span>)                            <span class=\"comment\"># 回到第一行，因为每次使用readline，文本都会后退一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(raw_number):\t        \t<span class=\"comment\"># 计算文件的总行数，设计循环逐行读入数据\t</span></span><br><span class=\"line\">\t\t\ttext_line = file.readline()     \t<span class=\"comment\"># 每次调用该函数使文件下移一行</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列</span></span><br><span class=\"line\">\t\t\ttemp_file = text_line.strip().split(<span class=\"string\">' '</span>, <span class=\"number\">4</span>)             \t<span class=\"comment\"># temp_file存储分割后的数据列表</span></span><br><span class=\"line\">\t\t\tattribute_data = temp_file[<span class=\"number\">0</span>:<span class=\"number\">4</span>]      <span class=\"comment\"># 存储要使用的数据列</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> attribute_data:          <span class=\"comment\"># 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格</span></span><br><span class=\"line\">\t\t\t\tfile2.writelines(data)</span><br><span class=\"line\">\t\t\t\tfile2.writelines(<span class=\"string\">' '</span>)            <span class=\"comment\"># 数据间加入空格</span></span><br><span class=\"line\">\t\t\tfile2.writelines(<span class=\"string\">'\\n'</span>)               <span class=\"comment\"># 数据换行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error:'</span> + str(err)</span><br><span class=\"line\"><span class=\"keyword\">print</span> attribute_data </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-python函数shutil，实现文件的复制\"><a href=\"#3-python函数shutil，实现文件的复制\" class=\"headerlink\" title=\"3.python函数shutil，实现文件的复制\"></a>3.python函数shutil，实现文件的复制</h3><p>使用<code>shutil.copy(str_file1,str_file2)</code>将文件str_file1，复制到文件str_file2的位置</p>\n<h3 id=\"4-python实现读取文件夹里文件名功能\"><a href=\"#4-python实现读取文件夹里文件名功能\" class=\"headerlink\" title=\"4.python实现读取文件夹里文件名功能\"></a>4.python实现读取文件夹里文件名功能</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os </span><br><span class=\"line\">path = <span class=\"string\">'the path of the directory'</span>    <span class=\"comment\"># 读取文件路径</span></span><br><span class=\"line\">list_name = os.listdir(path)            <span class=\"comment\"># 读取路径下文件和文件夹的名</span></span><br></pre></td></tr></table></figure>\n<p>则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-python里-args和-kwargs的用法\"><a href=\"#1-python里-args和-kwargs的用法\" class=\"headerlink\" title=\"1. python里*args和**kwargs的用法\"></a>1. python里*args和**kwargs的用法</h3><p><code>引入参数*args和**kwargs，两个都是python中的可变参数。*args表示任何多个无名参数，它是一个tuple</code><br><code>**kwargs表示关键字参数，它是一个dict。并且同时使用*args和**kwargs时，必须*args参数列要在**kwargs前</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">(*args, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'args = '</span>, args</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'kwargs = '</span>, kwargs</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'---------------------------------------'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)                             <span class=\"comment\">#参数只传到*args中</span></span><br><span class=\"line\">    foo(a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)                         <span class=\"comment\">#参数只传到**kwargs中</span></span><br><span class=\"line\">    foo(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, a=<span class=\"number\">1</span>,b=<span class=\"number\">2</span>,c=<span class=\"number\">3</span>)                <span class=\"comment\">#参数可以传到*args和**kwargs中</span></span><br><span class=\"line\">    foo(<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"keyword\">None</span>, a=<span class=\"number\">1</span>, b=<span class=\"string\">'2'</span>, c=<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">args =  (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">kwargs =  &#123;&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  ()</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br><span class=\"line\">args =  (<span class=\"string\">'a'</span>, <span class=\"number\">1</span>, <span class=\"keyword\">None</span>)</span><br><span class=\"line\">kwargs =  &#123;<span class=\"string\">'a'</span>: <span class=\"number\">1</span>, <span class=\"string\">'c'</span>: <span class=\"number\">3</span>, <span class=\"string\">'b'</span>: <span class=\"string\">'2'</span>&#125;</span><br><span class=\"line\">---------------------------------------</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-python对txt文件的操作\"><a href=\"#2-python对txt文件的操作\" class=\"headerlink\" title=\"2.python对txt文件的操作\"></a>2.python对txt文件的操作</h3><p>2.1 使用<strong>open()</strong> 函数读取文本内容，本函数是打开一个文件并返回文件对象。如果文件不能打开，抛出异常OSError<br><code>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None, errors=None, newline=None, closefd=T)</code><br>参数mode是指明打开文件的模式。默认值是’r’，表示使用文本的方式打开文件来读取。</p>\n<p>‘r’表示打开文件只读，不能写。</p>\n<p>‘w’表示打开文件只写，并且清空文件。</p>\n<p>‘x’表示独占打开文件，如果文件已经存打开就会失败。</p>\n<p>‘a’表示打开文件写，不清空文件，在文件后尾追加的方式写入。</p>\n<p>‘b’表示二进制的模式打开文件。</p>\n<p>‘t’表示文本模式，默认情况下就是这种模式。</p>\n<p>‘+’打开文件更新（读取或写入）。</p>\n<p>缺省时的模式就相当于’rt’。比如’w+b’就是打开文件进入读写，把文件清空；’r+b’打开文件，但不把文件清空<br>打开文件的操作常使用异常捕捉来</p>\n<p>str.strip(rm)方法,去除字符串开头和结尾的rm字符，<code>readline()</code>获取的是一行文本的字符串形式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">open_file</span><span class=\"params\">(filename)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"打开一个文件，存储到列表中，并返回该列表\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename) <span class=\"keyword\">as</span> file_open:    <span class=\"comment\">#打开文件，因为只有一行，所以不用使用循环</span></span><br><span class=\"line\">            data = file_open.readline()</span><br><span class=\"line\">        <span class=\"comment\"># [james,james2,james3] = data.strip().split(',', 2)          #方法串链，从左向右作用</span></span><br><span class=\"line\">        file_data = data.strip().split(<span class=\"string\">','</span>)</span><br><span class=\"line\">        <span class=\"string\">\"\"\"split方法返回字符串列表，如果只是一个标识符接受，则不会报错</span></span><br><span class=\"line\"><span class=\"string\">        如果是[list1,list2,...]的形式则有可能因为接受数据的列表元素个数，与返回的</span></span><br><span class=\"line\"><span class=\"string\">        字符串列表的个数不一致而导致ValueError\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> file_data</span><br><span class=\"line\">    <span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> ioerr:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'IOError:'</span> + str(ioerr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError <span class=\"keyword\">as</span> valerr:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'ValueError:'</span> + str(valerr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure></p>\n<p> <code>(role, line_spoken) = each_line.split(&#39; ,&#39;)</code>，多重赋值(),[]均可以接受数据-字符串列表，<strong>each_line本身不会被分割，保持不变</strong><br><code>[role, line_spoken] = each_line.split(&#39;, &#39;,1)</code><br><code>[string1, string2, string3] = each_line.split(&#39;, &#39;, 2)</code>如果分割后的字符首位有“空格”，也会把其当成字符串第二个参数表示使用的分割符的个数，使用1则分为两个部分，如果不加则表示只要存在分隔符就会分解,n个分隔符分为n+1个部分，空字符也算入被分割的部分</p>\n<p>2.2 使用<strong>open()</strong> 函数和<strong>file_object.write()</strong> 方法写入文本<br><strong>方法一、增加额外的逻辑来处理异常</strong>,使用finally来关闭文件对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:   <span class=\"comment\">#文件写入过程</span></span><br><span class=\"line\">    man_file = open(<span class=\"string\">'man_data.txt'</span>, <span class=\"string\">'w'</span>)         <span class=\"comment\">#新建文件</span></span><br><span class=\"line\">    other_file = open(<span class=\"string\">'other_data.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    <span class=\"string\">\"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class=\"line\"><span class=\"string\">    write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># print &gt;&gt; man_file, man                       #文件对象里传入数据</span></span><br><span class=\"line\">    <span class=\"comment\"># print &gt;&gt; other_file, other</span></span><br><span class=\"line\">    man_file.write(str(man))</span><br><span class=\"line\">    other_file.write(str(other))</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error.'</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:  <span class=\"comment\">#无论有无异常，此句都会执行，</span></span><br><span class=\"line\">    man_file.close()</span><br><span class=\"line\">    other_file.close()</span><br></pre></td></tr></table></figure></p>\n<p><strong>方法二、with处理文件异常</strong>,不用考虑关闭文件对象<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:   <span class=\"comment\">#文件写入过程</span></span><br><span class=\"line\">    <span class=\"comment\"># with open('man_data.txt', 'w') as man_file:         #新建文件</span></span><br><span class=\"line\">    <span class=\"comment\">#     # print &gt;&gt; man_file, man                        #文件对象里传入数据</span></span><br><span class=\"line\">    <span class=\"comment\">#     man_file.write(str(man))</span></span><br><span class=\"line\">    <span class=\"comment\"># with open('other_data.txt', 'w') as other_file:</span></span><br><span class=\"line\">    <span class=\"comment\">#     \"\"\" write()与print都可以写入数据，当print可以由字符串或列表写入，</span></span><br><span class=\"line\">    <span class=\"comment\">#          write()括号里只能是字符串，所以列表需要先转换后字符串再放到括号里\"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\">#     # print &gt;&gt; other_file, other</span></span><br><span class=\"line\">    <span class=\"comment\">#     other_file.write(str(other))</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'man_data.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> man_file, open(<span class=\"string\">'other_data.txt'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> other_file:</span><br><span class=\"line\">        <span class=\"comment\">#两个语句合并为一个with语句</span></span><br><span class=\"line\">        man_file.write(str(man))</span><br><span class=\"line\">        other_file.write(str(other))</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error:'</span> + str(err)</span><br></pre></td></tr></table></figure></p>\n<p>2.3实例<br>打开train_data.txt，读取其中的前四行，然后存储到train_data2.txt文件里</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding:utf-8</span></span><br><span class=\"line\"><span class=\"comment\"># file.readlines()读取数据的行数，'行数据\\n' 是该方法输出列表的每行数据的元素</span></span><br><span class=\"line\">attribute_data = []</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">with</span> open(<span class=\"string\">'./train_data.txt'</span>) <span class=\"keyword\">as</span> file,  open(<span class=\"string\">'./train_data2.txt'</span>,<span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> file2:</span><br><span class=\"line\">\t\traw_number = len(file.readlines())      <span class=\"comment\"># 计算文件的总行数</span></span><br><span class=\"line\">\t\tfile.seek(<span class=\"number\">0</span>)                            <span class=\"comment\"># 回到第一行，因为每次使用readline，文本都会后退一行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(raw_number):\t        \t<span class=\"comment\"># 计算文件的总行数，设计循环逐行读入数据\t</span></span><br><span class=\"line\">\t\t\ttext_line = file.readline()     \t<span class=\"comment\"># 每次调用该函数使文件下移一行</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># temp_file = text_line.strip().split(' ', 32)              # temp_file存储分割后的数据列表</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\"># attribute_data = temp_file[0:2] + temp_file[12:32]        # 存储要使用的数据列</span></span><br><span class=\"line\">\t\t\ttemp_file = text_line.strip().split(<span class=\"string\">' '</span>, <span class=\"number\">4</span>)             \t<span class=\"comment\"># temp_file存储分割后的数据列表</span></span><br><span class=\"line\">\t\t\tattribute_data = temp_file[<span class=\"number\">0</span>:<span class=\"number\">4</span>]      <span class=\"comment\"># 存储要使用的数据列</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> data <span class=\"keyword\">in</span> attribute_data:          <span class=\"comment\"># 逐行写入数据,只能每个字符分别读入，才可以在数据中间插入空格</span></span><br><span class=\"line\">\t\t\t\tfile2.writelines(data)</span><br><span class=\"line\">\t\t\t\tfile2.writelines(<span class=\"string\">' '</span>)            <span class=\"comment\"># 数据间加入空格</span></span><br><span class=\"line\">\t\t\tfile2.writelines(<span class=\"string\">'\\n'</span>)               <span class=\"comment\"># 数据换行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'File error:'</span> + str(err)</span><br><span class=\"line\"><span class=\"keyword\">print</span> attribute_data </span><br><span class=\"line\">`</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-python函数shutil，实现文件的复制\"><a href=\"#3-python函数shutil，实现文件的复制\" class=\"headerlink\" title=\"3.python函数shutil，实现文件的复制\"></a>3.python函数shutil，实现文件的复制</h3><p>使用<code>shutil.copy(str_file1,str_file2)</code>将文件str_file1，复制到文件str_file2的位置</p>\n<h3 id=\"4-python实现读取文件夹里文件名功能\"><a href=\"#4-python实现读取文件夹里文件名功能\" class=\"headerlink\" title=\"4.python实现读取文件夹里文件名功能\"></a>4.python实现读取文件夹里文件名功能</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os </span><br><span class=\"line\">path = <span class=\"string\">'the path of the directory'</span>    <span class=\"comment\"># 读取文件路径</span></span><br><span class=\"line\">list_name = os.listdir(path)            <span class=\"comment\"># 读取路径下文件和文件夹的名</span></span><br></pre></td></tr></table></figure>\n<p>则list_name就是文件夹里所以子文件夹和文件的列表，可以通过os.path.isfile和os.path.isdir来对列表里的项进行判断看是文件还是文件夹。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgmb0njx0009qcvetc5dszb7","category_id":"cjgmb0njr0004qcve8m1gio3a","_id":"cjgmb0nk6000fqcve33htbfto"},{"post_id":"cjgmb0njn0002qcveginn8jz0","category_id":"cjgmb0njy000aqcve2mz8q5mu","_id":"cjgmb0nk7000gqcvent0e48x6"},{"post_id":"cjgmb0njt0006qcve3gd1j6mt","category_id":"cjgmb0nk3000dqcvepban9ous","_id":"cjgmb0nk9000lqcveg2rgrpd6"},{"post_id":"cjgmb0njv0008qcve8gk72ejk","category_id":"cjgmb0nk7000hqcvea5y2ic0g","_id":"cjgmb0nkc000qqcvellw5p7bh"},{"post_id":"cjgmb0njf0000qcvevywetqkv","category_id":"cjgmb0njr0004qcve8m1gio3a","_id":"cjgmb0nke000sqcvefdp1nta9"},{"post_id":"cjgmb0njf0000qcvevywetqkv","category_id":"cjgmb0nka000mqcve5wgzbwlz","_id":"cjgmb0nke000uqcvey7vcn83i"}],"PostTag":[{"post_id":"cjgmb0njx0009qcvetc5dszb7","tag_id":"cjgmb0njs0005qcvekgdqd63b","_id":"cjgmb0nk2000cqcveynn1ki2a"},{"post_id":"cjgmb0njf0000qcvevywetqkv","tag_id":"cjgmb0njs0005qcvekgdqd63b","_id":"cjgmb0nk8000jqcvelc1zhvef"},{"post_id":"cjgmb0njf0000qcvevywetqkv","tag_id":"cjgmb0njz000bqcvepgssvvds","_id":"cjgmb0nk9000kqcvewua24x8f"},{"post_id":"cjgmb0njf0000qcvevywetqkv","tag_id":"cjgmb0nk4000eqcveb9k1xun7","_id":"cjgmb0nkb000oqcveaap6ry57"},{"post_id":"cjgmb0njn0002qcveginn8jz0","tag_id":"cjgmb0nk8000iqcvern9q5xww","_id":"cjgmb0nkc000pqcvekihpuzu7"},{"post_id":"cjgmb0njt0006qcve3gd1j6mt","tag_id":"cjgmb0nkb000nqcvebqbhdbju","_id":"cjgmb0nkf000vqcvezm2q252y"},{"post_id":"cjgmb0njt0006qcve3gd1j6mt","tag_id":"cjgmb0nkd000rqcve7wb0tf5u","_id":"cjgmb0nkf000wqcvehtvxu9hd"},{"post_id":"cjgmb0njv0008qcve8gk72ejk","tag_id":"cjgmb0nke000tqcve503cusxv","_id":"cjgmb0nki000yqcvewixi8jfo"},{"post_id":"cjgmb0njv0008qcve8gk72ejk","tag_id":"cjgmb0nkg000xqcved7raadml","_id":"cjgmb0nki000zqcveckqgue0v"}],"Tag":[{"name":"Python","_id":"cjgmb0njs0005qcvekgdqd63b"},{"name":"dlib","_id":"cjgmb0njz000bqcvepgssvvds"},{"name":"opencv","_id":"cjgmb0nk4000eqcveb9k1xun7"},{"name":"docker","_id":"cjgmb0nk8000iqcvern9q5xww"},{"name":"C++","_id":"cjgmb0nkb000nqcvebqbhdbju"},{"name":"C++调用Python","_id":"cjgmb0nkd000rqcve7wb0tf5u"},{"name":"ubuntu系统","_id":"cjgmb0nke000tqcve503cusxv"},{"name":"sublime配置","_id":"cjgmb0nkg000xqcved7raadml"}]}}